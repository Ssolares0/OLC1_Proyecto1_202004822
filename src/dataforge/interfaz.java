package dataforge;

import abstracto.sentencia;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.*;
import java.awt.*;
import java.io.BufferedWriter;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.FileReader;
import java.io.IOException;
import java.io.StringReader;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import singleton.MiSingleton;
import analizadores.Sintactico;
import analizadores.Lexico;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import java.util.List;
import org.jfree.data.xy.XYSeries;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Sebastian S
 */
public class interfaz extends javax.swing.JFrame {

    private JTabbedPane tabbedPane;
    public List<JFreeChart> list_graficas;
    public int currentIndex;
    public ChartPanel chartPanel;

    /**
     * Creates new form interfaz
     */
    public interfaz() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        Errores = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DataForge");
        setBackground(new java.awt.Color(204, 255, 255));

        jLabel1.setText("Consola");

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("Anterior");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Siguiente");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 276, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 267, Short.MAX_VALUE)
        );

        jMenuBar1.setBackground(new java.awt.Color(204, 255, 255));

        jMenu1.setText("Archivo");

        jMenuItem1.setText("nuevo archivo");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Abrir Archivo");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Guardar");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setText("Eliminar");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Pesta√±as");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Ejecutar");

        jMenuItem5.setText("Ejecutar entrada");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Reportes");
        jMenu4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu4ActionPerformed(evt);
            }
        });

        Errores.setText("Errores");
        Errores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ErroresActionPerformed(evt);
            }
        });
        jMenu4.add(Errores);

        jMenuItem6.setText("Tokens");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem6);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(56, 56, 56)
                        .addComponent(jButton2)
                        .addGap(80, 80, 80))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 215, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:

        newArchivo();

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        openArchivo();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        guardarArchivo();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        //esta funcion sirve para eliminar la pestana actual
        int selectedIndex = jTabbedPane1.getSelectedIndex();
        if (selectedIndex != -1) {
            jTabbedPane1.remove(selectedIndex);
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        String titulo = "";
        String ejex = "";
        String ejey = "";
        String tituloX = "";
        String tituloY = "";
        String titulo_line = "";
        String ejex_line = "";
        String ejey_line = "";
        String tituloX_line = "";
        String tituloY_line = "";
        String EXEC = "";
        String titulo_pie = "";
        String label_pie = "";
        String values_pie = "";

        list_graficas = new ArrayList<>();
        currentIndex = 0;

        try {

            int selectedIndex = jTabbedPane1.getSelectedIndex();
            if (selectedIndex != -1) {
                JPanel selectedPanel = (JPanel) jTabbedPane1.getComponentAt(selectedIndex);
                JTextArea textArea = (JTextArea) ((JScrollPane) selectedPanel.getComponent(0)).getViewport().getView();
                String dato = textArea.getText();
                System.out.println(dato);

                Lexico scanner = new Lexico(new java.io.StringReader(dato));
                Sintactico parser = new Sintactico(scanner);
                parser.parse();

                // Crear el estilo del HTML errores
                String htmlstyle = "<!DOCTYPE html>"
                        + "<html>"
                        + "<head>"
                        + "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">"
                        + "<title>Errores</title>"
                        + "</head>"
                        + "<style>"
                        + "table, th {background-color: #D7C0AE;} td { border: 1px solid rgb(31, 31, 31);"
                        + "border-collapse: collapse;"
                        + "background-color: #D7C0AE;"
                        + "}"
                        + "th:nth-child(even),td:nth-child(even) {"
                        + "background-color: #EEE3CB;"
                        + "}"
                        + "</style>"
                        + "<body bgcolor=\"B7C4CF\">"
                        + "<center>";

                // Crear el contenido de la tabla
                String html = htmlstyle + "<table border=1><tr><th>Linea</th><th>Columna</th><th>Descripcion</th><th>Tipo</th></tr>";

                // Iterar sobre los errores sint√°cticos
                for (int i = 0; i < parser.errSint.size(); i++) {
                    html += "<tr><td><center>" + parser.errSint.get(i).getLine() + "</center></td><td><center>"
                            + parser.errSint.get(i).getColumn() + "</center></td><td><center>" + parser.errSint.get(i).getDescription()
                            + "</center></td><td><center>" + parser.errSint.get(i).getError() + "</center></td></tr>";
                }

                // Iterar sobre los errores l√©xicos
                for (int i = 0; i < scanner.errLex.size(); i++) {
                    html += "<tr><td><center>" + scanner.errLex.get(i).getLine() + "</center></td><td><center>"
                            + scanner.errLex.get(i).getColumn() + "</center></td><td><center>" + scanner.errLex.get(i).getDescription()
                            + "</center></td><td><center>" + scanner.errLex.get(i).getError() + "</center></td></tr>";
                }

                html += "</table></center></body></html>";

                // Guardar en un archivo llamado "errores.html"
                File file = new File("Reportes/errores.html");
                BufferedWriter bw = new BufferedWriter(new FileWriter(file));
                bw.write(html);
                bw.close();

                // Crear el estilo del HTML tokens
                String htmlstyle2 = "<!DOCTYPE html>"
                        + "<html>"
                        + "<head>"
                        + "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">"
                        + "<title>Tokens</title>"
                        + "</head>"
                        + "<style>"
                        + "table, th {background-color: #D7C0AE;} td { border: 1px solid rgb(31, 31, 31);"
                        + "border-collapse: collapse;"
                        + "background-color: #D7C0AE;"
                        + "}"
                        + "th:nth-child(even),td:nth-child(even) {"
                        + "background-color: #EEE3CB;"
                        + "}"
                        + "</style>"
                        + "<body bgcolor=\"B7C4CF\">"
                        + "<center>";

                // Crear el contenido de la tabla
                String html2 = htmlstyle2 + "<table border=1><tr><th>Descripcion</th><th>Tipo</th><th>Fila</th><th>Columna</th></tr>";

                // Iterar sobre los token lexicos
                for (int i = 0; i < scanner.tokLex.size(); i++) {
                    html2 += "<tr><td><center>" + scanner.tokLex.get(i).getDescription()+"</center></td><td><center>"
                            + scanner.tokLex.get(i).getToken() + "</center></td><td><center>"
                            + scanner.tokLex.get(i).getFila() + "</center></td><td><center>"
                            + scanner.tokLex.get(i).getColumna() + "</center></td></tr>" ;
                }

                html2 += "</table></center></body></html>";

                // Guardar en un archivo llamado "errores.html"
                File file2 = new File("Reportes/Tokens.html");
                BufferedWriter bw2 = new BufferedWriter(new FileWriter(file2));
                bw2.write(html2);
                bw2.close();
                
                
                //creamos html symbolos
                
                // Crear el estilo del HTML tokens
                String htmlstyle3 = "<!DOCTYPE html>"
                        + "<html>"
                        + "<head>"
                        + "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">"
                        + "<title>Simbolos</title>"
                        + "</head>"
                        + "<style>"
                        + "table, th {background-color: #D7C0AE;} td { border: 1px solid rgb(31, 31, 31);"
                        + "border-collapse: collapse;"
                        + "background-color: #D7C0AE;"
                        + "}"
                        + "th:nth-child(even),td:nth-child(even) {"
                        + "background-color: #EEE3CB;"
                        + "}"
                        + "</style>"
                        + "<body bgcolor=\"B7C4CF\">"
                        + "<center>";

                // Crear el contenido de la tabla
                String html3 = htmlstyle3 + "<table border=1><tr><th>Nombre</th><th>valor</th></tr>";
                
                for (Map.Entry<String, String> entry : parser.variablesNorm.entrySet()) {
                    String key = entry.getKey();
                    String value = entry.getValue();
                   
                    html3 += "<tr><td><center>" + key+"</center></td><td><center>"
                 
                            + value + "</center></td></tr>" ;
                    
                    
                    
                }
                
                for (Map.Entry<String, String> entry :parser.variablesArr.entrySet()) {
                    String key = entry.getKey();
                    String value = entry.getValue();
                   
                    html3 += "<tr><td><center>" + key+"</center></td><td><center>"
                 
                            + value + "</center></td></tr>" ;
                    
                    
                    
                }
                html3 += "</table></center></body></html>";

                // Guardar en un archivo llamado "errores.html"
                File file3 = new File("Reportes/Symbolos.html");
                BufferedWriter bw3 = new BufferedWriter(new FileWriter(file3));
                bw3.write(html3);
                bw3.close();

                // Recorrer el HashMap para obtener las claves y los valores
                for (Map.Entry<String, String> entry : parser.graficasBarras.entrySet()) {
                    String clave = entry.getKey();
                    String valor = entry.getValue();

                    // Asignar los valores a las variables seg√∫n la clave
                    switch (clave) {
                        case "ejeX":
                            ejex = valor;
                            System.out.println(ejex);
                            break;
                        case "ejeY":
                            ejey = valor;
                            break;
                        case "tituloX":
                            tituloX = valor;
                            break;
                        case "tituloY":
                            tituloY = valor;

                            break;
                        case "titulo":
                            titulo = valor;
                            break;
                        // Agregar m√°s casos seg√∫n sea necesario para m√°s claves
                    }

                }

                String[] listEjex = ejex.split("[=,]");
                String[] listEjey = ejey.split("[=,]");

                DefaultCategoryDataset datos = new DefaultCategoryDataset();

                for (int i = 0; i < listEjey.length; i++) {

                    try {
                        double valor = Double.parseDouble(listEjey[i]); // Convertir el valor de String a int

                        datos.setValue(valor, listEjex[i], "SS");

                    } catch (Exception e) {
                        System.out.println("no hay valores en la grafica barras");
                    }

                }

                JFreeChart grafica_barras = ChartFactory.createBarChart3D(
                        titulo,
                        tituloX,
                        tituloY,
                        datos,
                        PlotOrientation.VERTICAL,
                        true,
                        true,
                        false
                );
                list_graficas.add(grafica_barras);

                for (Map.Entry<String, String> entry : parser.graficasPie.entrySet()) {
                    String clave = entry.getKey();
                    String valor = entry.getValue();

                    // Asignar los valores a las variables seg√∫n la clave
                    switch (clave) {
                        case "label":
                            label_pie = valor;
                            System.out.println(label_pie);

                            break;
                        case "values":
                            values_pie = valor;
                            System.out.println(values_pie);
                            break;
                        case "titulo":
                            titulo_pie = valor;
                            break;

                    }

                }
                String[] list_labelpie = label_pie.split("[=,]");
                String[] list_valuepie = values_pie.split("[=,]");

                DefaultPieDataset datos_pie = new DefaultPieDataset();

                for (int i = 0; i < listEjey.length; i++) {
                    try {
                        double valor = Double.parseDouble(list_valuepie[i]); // Convertir el valor de String a int
                        datos_pie.setValue(list_labelpie[i], valor);
                    } catch (Exception e) {
                        System.out.println("No hay valores en la lista de grafica pie");
                    }

                    // Asignar el valor y las etiquetas al conjunto de datos
                }

                JFreeChart grafica_pie = ChartFactory.createPieChart(
                        titulo_pie,
                        datos_pie,
                        true,
                        true,
                        false
                );

                list_graficas.add(grafica_pie);

                for (Map.Entry<String, String> entry_line : parser.graficaLineal.entrySet()) {
                    String clave = entry_line.getKey();
                    String valor = entry_line.getValue();

                    switch (clave) {
                        case "ejeX":
                            ejex_line = valor;
                            System.out.println("en lineal"+ejex_line);
                            break;
                        case "ejeY":
                            ejey_line = valor;
                            System.out.println("en lineal y"+ejey_line);
                            break;
                        case "tituloX":
                            tituloX_line = valor;
                            break;
                        case "tituloY":
                            tituloY_line = valor;

                            break;
                        case "titulo":
                            titulo_line = valor;
                            break;
                        // Agregar m√°s casos seg√∫n sea necesario para m√°s claves
                    }
                }
                
                String[] listEjex_line = ejex_line.split("[=,]");
                String[] listEjey_line = ejey_line.split("[=,]");
               

                DefaultCategoryDataset dataset = new DefaultCategoryDataset();

                for (int i = 0; i < listEjey_line.length; i++) {

                    try {
                        double valor = Double.parseDouble(listEjey_line[i]); // Convertir el valor de String a int

                        dataset.setValue(valor, "SS", listEjex_line[i]);

                    } catch (Exception e) {
                        System.out.println("no hay valores en la grafica lineal");
                    }

                }
                JFreeChart graficaLineal = ChartFactory.createLineChart(
                        titulo_line, // T√≠tulo del gr√°fico
                        tituloX_line, // Etiqueta del eje X
                        tituloY_line, // Etiqueta del eje Y
                        dataset // Conjunto de datos
                );

                list_graficas.add(graficaLineal);

                // Configurar el panel de la gr√°fica
                ChartPanel grafb = new ChartPanel(list_graficas.get(currentIndex));

                jPanel1.setLayout(new BorderLayout());
                jPanel1.setPreferredSize(new Dimension(350, 350));
                jPanel1.add(grafb, BorderLayout.CENTER);

                System.out.println("Analizando entrada... ");

                LinkedList<sentencia> AST = parser.getAST();

                for (int i = 0; i < AST.size(); i++) {
                    AST.get(i).ejecutar();
                }
                MiSingleton singleton = MiSingleton.obtenerInstancia();
                jTextArea1.setText(singleton.get_consola());

            }

        } catch (Exception e) {

            System.out.println("Ocurrio un error al mandar la entrada");
            Logger.getLogger(interfaz.class.getName()).log(Level.SEVERE, null, e);

        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenu4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu4ActionPerformed

    private void ErroresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ErroresActionPerformed
        // Cambia la ruta a la ubicaci√≥n de tu archivo HTML
        File htmlFile = new File("errores.html");

        try {
            Desktop.getDesktop().browse(htmlFile.toURI());
        } catch (IOException e) {
            e.printStackTrace();
        }


    }//GEN-LAST:event_ErroresActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        File htmlFile = new File("tokens.html");

        try {
            Desktop.getDesktop().browse(htmlFile.toURI());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        // Mostrar la gr√°fica anterior
        currentIndex = (currentIndex - 1 + list_graficas.size()) % list_graficas.size();
        updateChartPanel();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        // Mostrar la siguiente gr√°fica
        currentIndex = (currentIndex + 1) % list_graficas.size();
        updateChartPanel();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new interfaz().setVisible(true);
            }
        });
    }

    private void newArchivo() {

        JPanel newPanel = new JPanel(new BorderLayout());
        JTextArea textArea = new JTextArea();
        JScrollPane scrollPane = new JScrollPane(textArea);
        newPanel.add(scrollPane, BorderLayout.CENTER);

        jTabbedPane1.addTab("undefined", newPanel);
        int lastIndex = jTabbedPane1.getTabCount() - 1;
        jTabbedPane1.setSelectedIndex(lastIndex);

    }

    private void guardarArchivo() {
        int selectedIndex = jTabbedPane1.getSelectedIndex();
        if (selectedIndex != -1) {
            JPanel selectedPanel = (JPanel) jTabbedPane1.getComponentAt(selectedIndex);
            JTextArea textArea = (JTextArea) ((JScrollPane) selectedPanel.getComponent(0)).getViewport().getView();

            JFileChooser fileChooser = new JFileChooser();
            int result = fileChooser.showSaveDialog(this);

            if (result == JFileChooser.APPROVE_OPTION) {
                java.io.File selectedFile = fileChooser.getSelectedFile();
                try (BufferedWriter writer = new BufferedWriter(new FileWriter(selectedFile))) {
                    writer.write(textArea.getText());
                    JOptionPane.showMessageDialog(this, "Archivo guardado exitosamente.", "√âxito", JOptionPane.INFORMATION_MESSAGE);
                } catch (IOException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error al guardar el archivo.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }

    }

    private void openArchivo() {

        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            // Seleccionar un archivo
            java.io.File selectedFile = fileChooser.getSelectedFile();

            // verificamos la extensi√≥n del archivo
            if (selectedFile.getName().toLowerCase().endsWith(".df")) {
                String contenido = readContenidoArchivo(selectedFile);
                JPanel newPanel = new JPanel(new BorderLayout());
                JTextArea textArea = new JTextArea(contenido);
                JScrollPane scrollPane = new JScrollPane(textArea);
                newPanel.add(scrollPane, BorderLayout.CENTER);

                jTabbedPane1.addTab(selectedFile.getName(), newPanel);
            } else {
                JOptionPane.showMessageDialog(this, "Por favor, seleccione un archivo con extensi√≥n .df", "Error", JOptionPane.ERROR_MESSAGE);
            }

        }
    }

    public void updateChartPanel() {
        jPanel1.removeAll();
        jPanel1.add(new ChartPanel(list_graficas.get(currentIndex)), BorderLayout.CENTER);
        jPanel1.revalidate();

        jPanel1.repaint();
    }

    private String readContenidoArchivo(java.io.File file) {
        StringBuilder contenido = new StringBuilder();
        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                contenido.append(linea).append("\n");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return contenido.toString();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Errores;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    public javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

}
