
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import expressions.Valores;
import sentence.print;
import sentence.erro;
import sentence.func;
import sentence.declaracionArray;
import sentence.declaracion;
import abstracto.Expresions;
import abstracto.sentencia;
import abstracto.Types;
import abstracto.Types.Type;
import java.util.ArrayList;
import dataforge.Errores;
import analizadores.funcionesUsar;
import java.util.HashMap;
import java.util.Map;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\171\000\002\002\004\000\002\002\005\000\002\024" +
    "\004\000\002\024\003\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\004\012\000\002\017\014\000\002\014\010\000\002\063" +
    "\002\000\002\016\015\000\002\016\012\000\002\012\003" +
    "\000\002\012\003\000\002\020\006\000\002\020\006\000" +
    "\002\020\006\000\002\020\006\000\002\020\006\000\002" +
    "\021\010\000\002\021\010\000\002\021\010\000\002\021" +
    "\010\000\002\021\010\000\002\021\010\000\002\021\006" +
    "\000\002\021\006\000\002\021\006\000\002\021\006\000" +
    "\002\021\006\000\002\021\006\000\002\006\005\000\002" +
    "\006\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\010\005\000\002\010\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\032\006\000\002\033\004\000\002" +
    "\033\003\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\035\010\000\002\040\012\000\002\040\010\000" +
    "\002\041\012\000\002\041\010\000\002\036\010\000\002" +
    "\037\010\000\002\042\004\000\002\043\006\000\002\044" +
    "\004\000\002\044\003\000\002\045\005\000\002\045\005" +
    "\000\002\045\005\000\002\045\005\000\002\046\010\000" +
    "\002\050\012\000\002\050\010\000\002\051\012\000\002" +
    "\051\010\000\002\047\004\000\002\052\006\000\002\053" +
    "\004\000\002\053\003\000\002\054\005\000\002\054\005" +
    "\000\002\054\005\000\002\054\005\000\002\054\005\000" +
    "\002\054\005\000\002\055\010\000\002\060\012\000\002" +
    "\060\010\000\002\061\012\000\002\061\010\000\002\056" +
    "\010\000\002\057\010\000\002\062\004\000\002\005\003" +
    "\000\002\005\003\000\002\026\005\000\002\026\003\000" +
    "\002\025\005\000\002\025\003\000\002\027\005\000\002" +
    "\027\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\030\003\000\002\031\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0159\000\004\045\005\001\002\000\004\002\u015b\001" +
    "\002\000\020\003\017\017\023\040\013\043\007\047\025" +
    "\050\021\051\006\001\002\000\004\023\u011e\001\002\000" +
    "\004\013\u0112\001\002\000\022\003\ufffe\017\ufffe\040\ufffe" +
    "\043\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\001\002\000" +
    "\004\044\u0110\001\002\000\004\044\u010e\001\002\000\004" +
    "\013\u0100\001\002\000\004\044\376\001\002\000\004\044" +
    "\374\001\002\000\022\003\017\017\023\040\013\043\007" +
    "\046\373\047\025\050\021\051\006\001\002\000\004\044" +
    "\370\001\002\000\004\044\366\001\002\000\004\023\313" +
    "\001\002\000\004\044\311\001\002\000\004\013\136\001" +
    "\002\000\004\044\134\001\002\000\004\023\026\001\002" +
    "\000\016\053\035\054\041\055\037\056\036\057\033\062" +
    "\040\001\002\000\020\024\133\053\035\054\041\055\037" +
    "\056\036\057\033\062\040\001\002\000\004\044\130\001" +
    "\002\000\004\044\126\001\002\000\004\044\124\001\002" +
    "\000\004\013\117\001\002\000\020\024\uffce\053\uffce\054" +
    "\uffce\055\uffce\056\uffce\057\uffce\062\uffce\001\002\000\004" +
    "\013\112\001\002\000\004\013\105\001\002\000\004\013" +
    "\075\001\002\000\004\047\074\001\002\000\004\013\053" +
    "\001\002\000\004\044\051\001\002\000\004\044\047\001" +
    "\002\000\004\044\045\001\002\000\004\014\046\001\002" +
    "\000\020\024\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057" +
    "\uffcd\062\uffcd\001\002\000\004\014\050\001\002\000\020" +
    "\024\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\062" +
    "\uffcc\001\002\000\004\014\052\001\002\000\020\024\uffcb" +
    "\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\062\uffcb\001" +
    "\002\000\004\013\054\001\002\000\004\042\055\001\002" +
    "\000\004\022\056\001\002\000\014\004\064\005\057\007" +
    "\065\015\066\016\060\001\002\000\010\006\uff98\010\uff98" +
    "\044\uff98\001\002\000\012\006\uff8e\010\uff8e\024\uff8e\044" +
    "\uff8e\001\002\000\010\006\uff97\010\uff97\044\uff97\001\002" +
    "\000\010\006\uff9e\010\uff9e\044\uff9e\001\002\000\010\006" +
    "\uff96\010\uff96\044\uff96\001\002\000\010\006\uff99\010\uff99" +
    "\044\uff99\001\002\000\012\004\064\005\057\015\066\016" +
    "\060\001\002\000\014\006\uff8f\010\uff8f\012\uff8f\024\uff8f" +
    "\044\uff8f\001\002\000\006\006\070\044\uffc5\001\002\000" +
    "\012\004\064\005\057\015\066\016\060\001\002\000\010" +
    "\006\uff9f\010\uff9f\044\uff9f\001\002\000\006\006\070\010" +
    "\073\001\002\000\004\044\uffc6\001\002\000\004\044\uffc0" +
    "\001\002\000\004\013\076\001\002\000\004\041\077\001" +
    "\002\000\004\022\100\001\002\000\014\004\064\005\057" +
    "\007\101\015\066\016\060\001\002\000\012\004\064\005" +
    "\057\015\066\016\060\001\002\000\006\006\070\044\uffc3" +
    "\001\002\000\006\006\070\010\104\001\002\000\004\044" +
    "\uffc4\001\002\000\004\013\106\001\002\000\004\042\107" +
    "\001\002\000\004\022\110\001\002\000\012\004\064\005" +
    "\057\015\066\016\060\001\002\000\004\044\uffc2\001\002" +
    "\000\004\013\113\001\002\000\004\042\114\001\002\000" +
    "\004\022\115\001\002\000\004\005\116\001\002\000\004" +
    "\044\uffc7\001\002\000\004\013\120\001\002\000\004\042" +
    "\121\001\002\000\004\022\122\001\002\000\012\004\064" +
    "\005\057\015\066\016\060\001\002\000\004\044\uffc1\001" +
    "\002\000\004\014\125\001\002\000\020\024\uffca\053\uffca" +
    "\054\uffca\055\uffca\056\uffca\057\uffca\062\uffca\001\002\000" +
    "\004\014\127\001\002\000\020\024\uffc9\053\uffc9\054\uffc9" +
    "\055\uffc9\056\uffc9\057\uffc9\062\uffc9\001\002\000\004\014" +
    "\131\001\002\000\020\024\uffc8\053\uffc8\054\uffc8\055\uffc8" +
    "\056\uffc8\057\uffc8\062\uffc8\001\002\000\020\024\uffcf\053" +
    "\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\062\uffcf\001\002" +
    "\000\004\044\uffd0\001\002\000\004\014\135\001\002\000" +
    "\022\003\ufff9\017\ufff9\040\ufff9\043\ufff9\046\ufff9\047\ufff9" +
    "\050\ufff9\051\ufff9\001\002\000\004\013\137\001\002\000" +
    "\006\020\141\021\140\001\002\000\004\022\307\001\002" +
    "\000\004\022\142\001\002\000\006\005\145\015\066\001" +
    "\002\000\004\012\uffee\001\002\000\004\012\146\001\002" +
    "\000\004\012\uffef\001\002\000\042\004\162\005\150\007" +
    "\165\015\066\016\060\025\147\026\172\027\167\030\171" +
    "\031\157\032\153\033\151\034\160\035\152\036\164\037" +
    "\161\001\002\000\004\023\304\001\002\000\010\006\uff94" +
    "\010\uff94\044\uff94\001\002\000\004\023\275\001\002\000" +
    "\004\023\266\001\002\000\004\023\257\001\002\000\010" +
    "\006\uff91\010\uff91\044\uff91\001\002\000\010\006\uff93\010" +
    "\uff93\044\uff93\001\002\000\010\006\uff92\010\uff92\044\uff92" +
    "\001\002\000\004\023\254\001\002\000\004\023\245\001" +
    "\002\000\004\023\236\001\002\000\010\006\uff95\010\uff95" +
    "\044\uff95\001\002\000\010\006\uff90\010\uff90\044\uff90\001" +
    "\002\000\004\023\220\001\002\000\040\004\162\005\150" +
    "\015\066\016\060\025\147\026\172\027\167\030\171\031" +
    "\157\032\153\033\151\034\160\035\152\036\164\037\161" +
    "\001\002\000\006\006\213\044\ufff0\001\002\000\004\023" +
    "\210\001\002\000\010\006\uff9c\010\uff9c\044\uff9c\001\002" +
    "\000\004\023\205\001\002\000\004\023\173\001\002\000" +
    "\034\004\200\015\066\025\147\026\172\027\167\030\171" +
    "\031\157\032\153\033\151\034\160\035\152\036\164\037" +
    "\161\001\002\000\006\006\202\024\203\001\002\000\006" +
    "\006\uffd7\024\uffd7\001\002\000\006\006\uffda\024\uffda\001" +
    "\002\000\006\006\uffd9\024\uffd9\001\002\000\006\006\uffd8" +
    "\024\uffd8\001\002\000\006\006\uffdb\024\uffdb\001\002\000" +
    "\034\004\200\015\066\025\147\026\172\027\167\030\171" +
    "\031\157\032\153\033\151\034\160\035\152\036\164\037" +
    "\161\001\002\000\012\006\uffec\010\uffec\024\uffec\044\uffec" +
    "\001\002\000\006\006\uffdc\024\uffdc\001\002\000\034\004" +
    "\200\015\066\025\147\026\172\027\167\030\171\031\157" +
    "\032\153\033\151\034\160\035\152\036\164\037\161\001" +
    "\002\000\006\006\202\024\207\001\002\000\012\006\uffea" +
    "\010\uffea\024\uffea\044\uffea\001\002\000\034\004\200\015" +
    "\066\025\147\026\172\027\167\030\171\031\157\032\153" +
    "\033\151\034\160\035\152\036\164\037\161\001\002\000" +
    "\006\006\202\024\212\001\002\000\012\006\uffeb\010\uffeb" +
    "\024\uffeb\044\uffeb\001\002\000\040\004\162\005\150\015" +
    "\066\016\060\025\147\026\172\027\167\030\171\031\157" +
    "\032\153\033\151\034\160\035\152\036\164\037\161\001" +
    "\002\000\010\006\uff9d\010\uff9d\044\uff9d\001\002\000\006" +
    "\006\213\010\ufff2\001\002\000\004\010\217\001\002\000" +
    "\004\044\ufff1\001\002\000\036\004\223\007\225\016\060" +
    "\025\147\026\172\027\167\030\171\031\157\032\153\033" +
    "\151\034\160\035\152\036\164\037\161\001\002\000\010" +
    "\006\uffd3\010\uffd3\024\uffd3\001\002\000\010\006\uffd4\010" +
    "\uffd4\024\uffd4\001\002\000\010\006\uffd2\010\uffd2\024\uffd2" +
    "\001\002\000\010\006\uffd1\010\uffd1\024\uffd1\001\002\000" +
    "\034\004\223\016\060\025\147\026\172\027\167\030\171" +
    "\031\157\032\153\033\151\034\160\035\152\036\164\037" +
    "\161\001\002\000\010\006\uffd5\010\uffd5\024\uffd5\001\002" +
    "\000\006\006\230\024\231\001\002\000\034\004\223\016" +
    "\060\025\147\026\172\027\167\030\171\031\157\032\153" +
    "\033\151\034\160\035\152\036\164\037\161\001\002\000" +
    "\012\006\uffde\010\uffde\024\uffde\044\uffde\001\002\000\010" +
    "\006\uffd6\010\uffd6\024\uffd6\001\002\000\006\006\230\010" +
    "\234\001\002\000\004\024\235\001\002\000\012\006\uffe4" +
    "\010\uffe4\024\uffe4\044\uffe4\001\002\000\036\004\223\007" +
    "\237\016\060\025\147\026\172\027\167\030\171\031\157" +
    "\032\153\033\151\034\160\035\152\036\164\037\161\001" +
    "\002\000\034\004\223\016\060\025\147\026\172\027\167" +
    "\030\171\031\157\032\153\033\151\034\160\035\152\036" +
    "\164\037\161\001\002\000\006\006\230\024\241\001\002" +
    "\000\012\006\uffdd\010\uffdd\024\uffdd\044\uffdd\001\002\000" +
    "\006\006\230\010\243\001\002\000\004\024\244\001\002" +
    "\000\012\006\uffe3\010\uffe3\024\uffe3\044\uffe3\001\002\000" +
    "\036\004\223\007\246\016\060\025\147\026\172\027\167" +
    "\030\171\031\157\032\153\033\151\034\160\035\152\036" +
    "\164\037\161\001\002\000\034\004\223\016\060\025\147" +
    "\026\172\027\167\030\171\031\157\032\153\033\151\034" +
    "\160\035\152\036\164\037\161\001\002\000\006\006\230" +
    "\024\250\001\002\000\012\006\uffe0\010\uffe0\024\uffe0\044" +
    "\uffe0\001\002\000\006\006\230\010\252\001\002\000\004" +
    "\024\253\001\002\000\012\006\uffe6\010\uffe6\024\uffe6\044" +
    "\uffe6\001\002\000\034\004\200\015\066\025\147\026\172" +
    "\027\167\030\171\031\157\032\153\033\151\034\160\035" +
    "\152\036\164\037\161\001\002\000\006\006\202\024\256" +
    "\001\002\000\012\006\uffe9\010\uffe9\024\uffe9\044\uffe9\001" +
    "\002\000\036\004\223\007\260\016\060\025\147\026\172" +
    "\027\167\030\171\031\157\032\153\033\151\034\160\035" +
    "\152\036\164\037\161\001\002\000\034\004\223\016\060" +
    "\025\147\026\172\027\167\030\171\031\157\032\153\033" +
    "\151\034\160\035\152\036\164\037\161\001\002\000\006" +
    "\006\230\024\262\001\002\000\012\006\uffe2\010\uffe2\024" +
    "\uffe2\044\uffe2\001\002\000\006\006\230\010\264\001\002" +
    "\000\004\024\265\001\002\000\012\006\uffe8\010\uffe8\024" +
    "\uffe8\044\uffe8\001\002\000\036\004\223\007\267\016\060" +
    "\025\147\026\172\027\167\030\171\031\157\032\153\033" +
    "\151\034\160\035\152\036\164\037\161\001\002\000\034" +
    "\004\223\016\060\025\147\026\172\027\167\030\171\031" +
    "\157\032\153\033\151\034\160\035\152\036\164\037\161" +
    "\001\002\000\006\006\230\024\271\001\002\000\012\006" +
    "\uffdf\010\uffdf\024\uffdf\044\uffdf\001\002\000\006\006\230" +
    "\010\273\001\002\000\004\024\274\001\002\000\012\006" +
    "\uffe5\010\uffe5\024\uffe5\044\uffe5\001\002\000\036\004\223" +
    "\007\276\016\060\025\147\026\172\027\167\030\171\031" +
    "\157\032\153\033\151\034\160\035\152\036\164\037\161" +
    "\001\002\000\034\004\223\016\060\025\147\026\172\027" +
    "\167\030\171\031\157\032\153\033\151\034\160\035\152" +
    "\036\164\037\161\001\002\000\006\006\230\024\300\001" +
    "\002\000\012\006\uffe1\010\uffe1\024\uffe1\044\uffe1\001\002" +
    "\000\006\006\230\010\302\001\002\000\004\024\303\001" +
    "\002\000\012\006\uffe7\010\uffe7\024\uffe7\044\uffe7\001\002" +
    "\000\034\004\200\015\066\025\147\026\172\027\167\030" +
    "\171\031\157\032\153\033\151\034\160\035\152\036\164" +
    "\037\161\001\002\000\006\006\202\024\306\001\002\000" +
    "\012\006\uffed\010\uffed\024\uffed\044\uffed\001\002\000\040" +
    "\004\162\005\150\015\066\016\060\025\147\026\172\027" +
    "\167\030\171\031\157\032\153\033\151\034\160\035\152" +
    "\036\164\037\161\001\002\000\006\006\213\044\ufff3\001" +
    "\002\000\004\014\312\001\002\000\022\003\ufffd\017\ufffd" +
    "\040\ufffd\043\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\001" +
    "\002\000\012\053\315\060\322\061\317\062\316\001\002" +
    "\000\004\044\364\001\002\000\004\013\357\001\002\000" +
    "\004\050\356\001\002\000\004\013\346\001\002\000\004" +
    "\044\344\001\002\000\004\044\342\001\002\000\004\013" +
    "\332\001\002\000\004\044\330\001\002\000\014\024\326" +
    "\053\315\060\322\061\317\062\316\001\002\000\014\024" +
    "\uffbd\053\uffbd\060\uffbd\061\uffbd\062\uffbd\001\002\000\004" +
    "\044\uffbf\001\002\000\014\024\uffbe\053\uffbe\060\uffbe\061" +
    "\uffbe\062\uffbe\001\002\000\004\014\331\001\002\000\014" +
    "\024\uffb9\053\uffb9\060\uffb9\061\uffb9\062\uffb9\001\002\000" +
    "\004\013\333\001\002\000\004\041\334\001\002\000\004" +
    "\022\335\001\002\000\014\004\064\005\057\007\336\015" +
    "\066\016\060\001\002\000\012\004\064\005\057\015\066" +
    "\016\060\001\002\000\006\006\070\044\uffb4\001\002\000" +
    "\006\006\070\010\341\001\002\000\004\044\uffb5\001\002" +
    "\000\004\014\343\001\002\000\014\024\uffbb\053\uffbb\060" +
    "\uffbb\061\uffbb\062\uffbb\001\002\000\004\014\345\001\002" +
    "\000\014\024\uffbc\053\uffbc\060\uffbc\061\uffbc\062\uffbc\001" +
    "\002\000\004\013\347\001\002\000\004\042\350\001\002" +
    "\000\004\022\351\001\002\000\014\004\064\005\057\007" +
    "\352\015\066\016\060\001\002\000\012\004\064\005\057" +
    "\015\066\016\060\001\002\000\006\006\070\044\uffb6\001" +
    "\002\000\006\006\070\010\355\001\002\000\004\044\uffb7" +
    "\001\002\000\004\044\uffb3\001\002\000\004\013\360\001" +
    "\002\000\004\042\361\001\002\000\004\022\362\001\002" +
    "\000\012\004\064\005\057\015\066\016\060\001\002\000" +
    "\004\044\uffb8\001\002\000\004\014\365\001\002\000\014" +
    "\024\uffba\053\uffba\060\uffba\061\uffba\062\uffba\001\002\000" +
    "\004\014\367\001\002\000\022\003\ufff8\017\ufff8\040\ufff8" +
    "\043\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\001\002\000" +
    "\004\014\371\001\002\000\022\003\ufff6\017\ufff6\040\ufff6" +
    "\043\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\001\002\000" +
    "\022\003\uffff\017\uffff\040\uffff\043\uffff\046\uffff\047\uffff" +
    "\050\uffff\051\uffff\001\002\000\004\002\000\001\002\000" +
    "\004\014\375\001\002\000\022\003\ufff7\017\ufff7\040\ufff7" +
    "\043\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7\001\002\000" +
    "\004\014\377\001\002\000\022\003\ufffa\017\ufffa\040\ufffa" +
    "\043\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\001\002\000" +
    "\006\041\u0101\042\u0103\001\002\000\004\013\uffa0\001\002" +
    "\000\004\013\u0104\001\002\000\004\013\uffa1\001\002\000" +
    "\004\013\u0105\001\002\000\004\015\u0106\001\002\000\004" +
    "\011\u0107\001\002\000\036\004\u010d\005\u0108\015\066\025" +
    "\147\026\172\027\167\030\171\031\157\032\153\033\151" +
    "\034\160\035\152\036\164\037\161\001\002\000\010\006" +
    "\uff8c\010\uff8c\044\uff8c\001\002\000\004\044\ufff5\001\002" +
    "\000\010\006\uff89\010\uff89\044\uff89\001\002\000\010\006" +
    "\uff8b\010\uff8b\044\uff8b\001\002\000\010\006\uff8a\010\uff8a" +
    "\044\uff8a\001\002\000\010\006\uff8d\010\uff8d\044\uff8d\001" +
    "\002\000\004\014\u010f\001\002\000\022\003\ufffb\017\ufffb" +
    "\040\ufffb\043\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\001" +
    "\002\000\004\014\u0111\001\002\000\022\003\ufffc\017\ufffc" +
    "\040\ufffc\043\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc\001" +
    "\002\000\006\041\u0101\042\u0103\001\002\000\004\013\u0114" +
    "\001\002\000\004\013\u0115\001\002\000\004\016\u0116\001" +
    "\002\000\004\011\u0117\001\002\000\004\007\u0118\001\002" +
    "\000\036\004\u010d\005\u0108\015\066\025\147\026\172\027" +
    "\167\030\171\031\157\032\153\033\151\034\160\035\152" +
    "\036\164\037\161\001\002\000\006\006\uff9a\010\uff9a\001" +
    "\002\000\006\006\u011b\010\u011c\001\002\000\036\004\u010d" +
    "\005\u0108\015\066\025\147\026\172\027\167\030\171\031" +
    "\157\032\153\033\151\034\160\035\152\036\164\037\161" +
    "\001\002\000\004\044\ufff4\001\002\000\006\006\uff9b\010" +
    "\uff9b\001\002\000\016\053\u0122\054\u0125\055\u0124\056\u0121" +
    "\057\u0120\062\u0123\001\002\000\004\044\u0159\001\002\000" +
    "\004\013\u0154\001\002\000\004\013\u014f\001\002\000\004" +
    "\013\u014a\001\002\000\004\051\u0149\001\002\000\004\013" +
    "\u0141\001\002\000\004\013\u0139\001\002\000\004\044\u0137" +
    "\001\002\000\020\024\u0135\053\u0122\054\u0125\055\u0124\056" +
    "\u0121\057\u0120\062\u0123\001\002\000\004\044\u0133\001\002" +
    "\000\004\044\u0131\001\002\000\004\044\u012f\001\002\000" +
    "\004\044\u012d\001\002\000\020\024\uffb0\053\uffb0\054\uffb0" +
    "\055\uffb0\056\uffb0\057\uffb0\062\uffb0\001\002\000\004\014" +
    "\u012e\001\002\000\020\024\uffad\053\uffad\054\uffad\055\uffad" +
    "\056\uffad\057\uffad\062\uffad\001\002\000\004\014\u0130\001" +
    "\002\000\020\024\uffab\053\uffab\054\uffab\055\uffab\056\uffab" +
    "\057\uffab\062\uffab\001\002\000\004\014\u0132\001\002\000" +
    "\020\024\uffae\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae" +
    "\062\uffae\001\002\000\004\014\u0134\001\002\000\020\024" +
    "\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa\062\uffaa" +
    "\001\002\000\004\044\uffb2\001\002\000\020\024\uffb1\053" +
    "\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\062\uffb1\001\002" +
    "\000\004\014\u0138\001\002\000\020\024\uffac\053\uffac\054" +
    "\uffac\055\uffac\056\uffac\057\uffac\062\uffac\001\002\000\004" +
    "\013\u013a\001\002\000\004\042\u013b\001\002\000\004\022" +
    "\u013c\001\002\000\014\004\064\005\057\007\u013d\015\066" +
    "\016\060\001\002\000\012\004\064\005\057\015\066\016" +
    "\060\001\002\000\006\006\070\044\uffa7\001\002\000\006" +
    "\006\070\010\u0140\001\002\000\004\044\uffa8\001\002\000" +
    "\004\013\u0142\001\002\000\004\041\u0143\001\002\000\004" +
    "\022\u0144\001\002\000\014\004\064\005\057\007\u0145\015" +
    "\066\016\060\001\002\000\012\004\064\005\057\015\066" +
    "\016\060\001\002\000\006\006\070\044\uffa5\001\002\000" +
    "\006\006\070\010\u0148\001\002\000\004\044\uffa6\001\002" +
    "\000\004\044\uffa2\001\002\000\004\013\u014b\001\002\000" +
    "\004\042\u014c\001\002\000\004\022\u014d\001\002\000\004" +
    "\005\u014e\001\002\000\004\044\uffa9\001\002\000\004\013" +
    "\u0150\001\002\000\004\042\u0151\001\002\000\004\022\u0152" +
    "\001\002\000\012\004\064\005\057\015\066\016\060\001" +
    "\002\000\004\044\uffa4\001\002\000\004\013\u0155\001\002" +
    "\000\004\042\u0156\001\002\000\004\022\u0157\001\002\000" +
    "\012\004\064\005\057\015\066\016\060\001\002\000\004" +
    "\044\uffa3\001\002\000\004\014\u015a\001\002\000\020\024" +
    "\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\062\uffaf" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0159\000\004\002\003\001\001\000\002\001\001\000" +
    "\024\003\007\004\011\014\021\016\010\017\013\024\015" +
    "\032\023\043\017\052\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\371\004\011\014\021\016\010\017\013" +
    "\032\023\043\017\052\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\033" +
    "\026\034\033\035\043\036\031\037\030\040\042\041\041" +
    "\042\027\001\001\000\020\034\131\035\043\036\031\037" +
    "\030\040\042\041\041\042\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\023\061\026\066\030" +
    "\060\031\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\023\061\026\071\030\060\031\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\023" +
    "\070\030\060\031\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\023\061" +
    "\026\101\030\060\031\062\001\001\000\012\023\061\026" +
    "\102\030\060\031\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\023\110\030\060\031\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\023\122\030\060\031\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\143\030\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\013\167\020\154\021\155\025\165\030\153\031\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\013\167\020\154\021\155" +
    "\025\214\030\153\031\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\006\173\007\200\020\175\021\176\030" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\203\020\175\021\176\030\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\006\205\007" +
    "\200\020\175\021\176\030\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\006\210\007\200\020\175\021" +
    "\176\030\174\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\013\213\020\154\021\155\030\153\031\162\001" +
    "\001\000\002\001\001\000\004\063\215\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\010\226\011\225\020" +
    "\220\021\221\031\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\010" +
    "\232\011\225\020\220\021\221\031\223\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\011\231\020\220\021" +
    "\221\031\223\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\010\237\011\225\020\220\021\221\031\223\001\001" +
    "\000\014\010\241\011\225\020\220\021\221\031\223\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\010\246\011" +
    "\225\020\220\021\221\031\223\001\001\000\014\010\250" +
    "\011\225\020\220\021\221\031\223\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\006\254\007\200\020\175\021" +
    "\176\030\174\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\010\260\011\225\020\220\021\221\031\223\001" +
    "\001\000\014\010\262\011\225\020\220\021\221\031\223" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\010\267" +
    "\011\225\020\220\021\221\031\223\001\001\000\014\010" +
    "\271\011\225\020\220\021\221\031\223\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\010\276\011\225\020\220" +
    "\021\221\031\223\001\001\000\014\010\300\011\225\020" +
    "\220\021\221\031\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\006\304\007\200\020\175\021\176\030\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\013" +
    "\167\020\154\021\155\025\307\030\153\031\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\044\323\045\324\046\317\047\322\050\320\051\313" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\045\326\046" +
    "\317\047\322\050\320\051\313\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\023\061\026\336\030\060\031\062\001" +
    "\001\000\012\023\061\026\337\030\060\031\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\023\061\026\352\030\060\031\062\001\001" +
    "\000\012\023\061\026\353\030\060\031\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\023\362\030\060\031\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\u0101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\015\u0108\020\u010a\021\u010b\030\u0109\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\u0112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\015\u0118\020\u010a\021\u010b\027\u0119\030" +
    "\u0109\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\015\u011c\020\u010a\021\u010b\030\u0109\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\053\u0126\054\u012b\055\u011e" +
    "\056\u0125\057\u0129\060\u0128\061\u012a\062\u0127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\054\u0135\055\u011e\056\u0125" +
    "\057\u0129\060\u0128\061\u012a\062\u0127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\023\061\026\u013d\030\060\031\062\001\001\000\012" +
    "\023\061\026\u013e\030\060\031\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\023\061\026" +
    "\u0145\030\060\031\062\001\001\000\012\023\061\026\u0146" +
    "\030\060\031\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\023\u0152\030\060\031\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\023\u0157\030\060\031\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    public ArrayList<Errores> errSint = new ArrayList<Errores>();

    public HashMap<String,String> graficasBarras = new HashMap<String,String>();
    public HashMap<String,String> graficasPie = new HashMap<String,String>();
    public HashMap<String,String> graficaLineal = new HashMap<String,String>();
    public HashMap<String,String> variablesNorm = new HashMap<String,String>();
    public Map<String, String> variablesArr = new HashMap<>();
    public LinkedList<String> list_sucesiva = new LinkedList<>();
    

    public LinkedList<sentencia>AST;
    

    public LinkedList<sentencia>getAST(){
    
        return AST;

    }


    public String findvariable(String id) {
        String var_valor = "";

        if (variablesNorm.containsKey(id)) {
            var_valor= variablesNorm.get(id);
            
        } else {
            System.out.println("No se encontro la variable");
            var_valor="0.0";
        }

        return var_valor;
    }

    public String findvariablearr(String id) {
        String var_valor = "";

        if (variablesArr.containsKey(id)) {
            var_valor= variablesArr.get(id);
            
        } else {
            System.out.println("No se encontro la variable");
            return var_valor="0.0";
        }

        return var_valor;
    }



    

    
    
   
    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
            Errores tmp = new Errores("Sintactico",s.right,s.left, s.value+"Error de sintaxis");
            errSint.add(tmp);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
            Errores tmp = new Errores("Sintactico",s.right,s.left, s.value+"Error de sintaxis sin recuperacion");
            errSint.add(tmp);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {

  
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= PROGRAM INSTRUCCIONES ENDPROGRAM 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<sentencia> b = (LinkedList<sentencia>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 parser.AST=b; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<sentencia> a = (LinkedList<sentencia>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		sentencia b = (sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT= a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		sentencia a = (sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= IMPRIMIR_EXP END PUNTOYCOMA 
            {
              sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		print a = (print)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT =a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= IMPRIMIR_ARRAY END PUNTOYCOMA 
            {
              sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		print a = (print)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= DECLARACION END PUNTOYCOMA 
            {
              sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT=new func("declarada variable"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= Dec_Arreglo END PUNTOYCOMA 
            {
              sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT=new func("declarada arreglo");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= GRAFBARRAS END PUNTOYCOMA 
            {
              sentencia RESULT =null;
		RESULT= new func("nuevagraficabarras");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= GRAFPIE END PUNTOYCOMA 
            {
              sentencia RESULT =null;
		RESULT= new func("NUEVA GRAFICA PIE");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= GRAFLINEAL END PUNTOYCOMA 
            {
              sentencia RESULT =null;
		RESULT= new func("NUEVA GRAFICA lineal");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= error END PUNTOYCOMA 
            {
              sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT= new erro("error sint"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACION ::= VAR DOSPUNTOS TIPO DOSPUNTOS DOSPUNTOS ID ASSIGN valores_variable 
            {
              Object RESULT =null;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id_var = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int exp_valeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exp_varight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp_va = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = variablesNorm.put(id_var,exp_va.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Dec_Arreglo ::= ARR DOSPUNTOS TIPO DOSPUNTOS DOSPUNTOS ID_ARRAY ASSIGN COR_IZQ EXP_SUCESIVASARR COR_DER 
            {
              Object RESULT =null;
		int tipo_arrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int tipo_arrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object tipo_arr = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int id_arrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int id_arrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id_arr = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object exp_s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = variablesArr.put(id_arr,exp_s.toString()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Dec_Arreglo",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IMPRIMIR_EXP ::= CONSOLE DOSPUNTOS DOSPUNTOS PRINT IGUAL EXP_SUCESIVAS 
            {
              print RESULT =null;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Expresions> exp_s = (LinkedList<Expresions>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new print(exp_s,exp_sright, exp_sleft,"! Salida: "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR_EXP",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$0 ::= 
            {
              print RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Expresions> exp_s = (LinkedList<Expresions>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 RESULT = new print(exp_s,exp_sright, exp_sleft,"! "+titulo.toString()+": "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IMPRIMIR_ARRAY ::= CONSOLE DOSPUNTOS DOSPUNTOS COLUMN IGUAL EXP_TITULO ASSIGN2 COR_IZQ EXP_SUCESIVAS NT$0 COR_DER 
            {
              print RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (print) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Expresions> exp_s = (LinkedList<Expresions>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR_ARRAY",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IMPRIMIR_ARRAY ::= CONSOLE DOSPUNTOS DOSPUNTOS COLUMN IGUAL EXP_TITULO ASSIGN2 EXP_SUCESIVAS 
            {
              print RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Expresions> exp_s = (LinkedList<Expresions>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new print(exp_s,exp_sright, exp_sleft,"! "+titulo.toString()+": "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR_ARRAY",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXP_TITULO ::= CADENA 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= cad; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_TITULO",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXP_TITULO ::= ID_DECLA 
            {
              Object RESULT =null;
		int id_tituloleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id_tituloright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id_titulo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= id_titulo; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_TITULO",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OP_ARITMETICA ::= sum PAR_IZQ OP PAR_DER 
            {
              Object RESULT =null;
		int sumleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String sum = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		double resultado = funcionesUsar.operacionAritmetica(sum, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OP_ARITMETICA ::= res PAR_IZQ OP PAR_DER 
            {
              Object RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String res = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		double resultado = funcionesUsar.operacionAritmetica(res, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OP_ARITMETICA ::= mul PAR_IZQ OP PAR_DER 
            {
              Object RESULT =null;
		int mulleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int mulright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String mul = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		double resultado = funcionesUsar.operacionAritmetica(mul, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OP_ARITMETICA ::= mod PAR_IZQ OP PAR_DER 
            {
              Object RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String mod = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		double resultado = funcionesUsar.operacionAritmetica(mod, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OP_ARITMETICA ::= div PAR_IZQ OP PAR_DER 
            {
              Object RESULT =null;
		int divleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int divright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String div = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		double resultado = funcionesUsar.operacionAritmetica(div, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OP_ESTADISTICA ::= media PAR_IZQ COR_IZQ OP3 COR_DER PAR_DER 
            {
              Object RESULT =null;
		int medialeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int mediaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String media = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		double resultado = funcionesUsar.operacionEstadistica(media, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ESTADISTICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OP_ESTADISTICA ::= mediana PAR_IZQ COR_IZQ OP3 COR_DER PAR_DER 
            {
              Object RESULT =null;
		int medianaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int medianaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String mediana = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		double resultado = funcionesUsar.operacionEstadistica(mediana, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ESTADISTICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OP_ESTADISTICA ::= moda PAR_IZQ COR_IZQ OP3 COR_DER PAR_DER 
            {
              Object RESULT =null;
		int modaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int modaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String moda = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		double resultado = funcionesUsar.operacionEstadistica(moda, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ESTADISTICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OP_ESTADISTICA ::= varianza PAR_IZQ COR_IZQ OP3 COR_DER PAR_DER 
            {
              Object RESULT =null;
		int varianzaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int varianzaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String varianza = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		double resultado = funcionesUsar.operacionEstadistica(varianza, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ESTADISTICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OP_ESTADISTICA ::= max PAR_IZQ COR_IZQ OP3 COR_DER PAR_DER 
            {
              Object RESULT =null;
		int maxleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String max = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		double resultado = funcionesUsar.operacionEstadistica(max, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ESTADISTICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OP_ESTADISTICA ::= min PAR_IZQ COR_IZQ OP3 COR_DER PAR_DER 
            {
              Object RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String min = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		double resultado = funcionesUsar.operacionEstadistica(min, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ESTADISTICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OP_ESTADISTICA ::= media PAR_IZQ OP3 PAR_DER 
            {
              Object RESULT =null;
		int medialeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int mediaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String media = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		double resultado = funcionesUsar.operacionEstadistica(media, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ESTADISTICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OP_ESTADISTICA ::= mediana PAR_IZQ OP3 PAR_DER 
            {
              Object RESULT =null;
		int medianaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int medianaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String mediana = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		double resultado = funcionesUsar.operacionEstadistica(mediana, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ESTADISTICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OP_ESTADISTICA ::= moda PAR_IZQ OP3 PAR_DER 
            {
              Object RESULT =null;
		int modaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int modaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String moda = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		double resultado = funcionesUsar.operacionEstadistica(moda, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ESTADISTICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OP_ESTADISTICA ::= varianza PAR_IZQ OP3 PAR_DER 
            {
              Object RESULT =null;
		int varianzaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int varianzaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String varianza = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		double resultado = funcionesUsar.operacionEstadistica(varianza, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ESTADISTICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OP_ESTADISTICA ::= max PAR_IZQ OP3 PAR_DER 
            {
              Object RESULT =null;
		int maxleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String max = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		double resultado = funcionesUsar.operacionEstadistica(max, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ESTADISTICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OP_ESTADISTICA ::= min PAR_IZQ OP3 PAR_DER 
            {
              Object RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String min = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		double resultado = funcionesUsar.operacionEstadistica(min, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ESTADISTICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OP ::= OP COMA OP2 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = val1.toString()+"="+val2.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OP ::= OP2 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT =val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OP2 ::= OP_ARITMETICA 
            {
              Object RESULT =null;
		int resuArileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int resuAriright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object resuAri = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= resuAri;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP2",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OP2 ::= OP_ESTADISTICA 
            {
              Object RESULT =null;
		int resuEstleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int resuEstright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object resuEst = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= resuEst; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP2",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OP2 ::= NUMERO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=num; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP2",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OP2 ::= ID_DECLA 
            {
              Object RESULT =null;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=id_var; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP2",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OP3 ::= OP3 COMA OP4 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = val1.toString()+","+val2.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP3",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OP3 ::= OP4 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT =val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP3",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OP4 ::= OP_ESTADISTICA 
            {
              Object RESULT =null;
		int resuEstleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int resuEstright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object resuEst = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= resuEst; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP4",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OP4 ::= OP_ARITMETICA 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT =num; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP4",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OP4 ::= NUMERO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=num; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP4",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OP4 ::= ARR_DECLA 
            {
              Object RESULT =null;
		int id_arrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id_arrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id_arr = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=id_arr;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP4",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // GRAFBARRAS ::= graphbar PAR_IZQ SENTENCIAS_BAR PAR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GRAFBARRAS",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIAS_BAR ::= SENTENCIAS_BAR BAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_BAR",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIAS_BAR ::= BAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_BAR",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BAR ::= TITULO_BAR END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BAR",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BAR ::= EJEX_BAR END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BAR",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BAR ::= EJEY_BAR END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BAR",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BAR ::= TITULOX_BAR END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BAR",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BAR ::= TITULOY_BAR END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BAR",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BAR ::= EXEC_BAR END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BAR",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TITULO_BAR ::= titulo DOSPUNTOS DOSPUNTOS CHAR IGUAL CADENA 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficasBarras.put(titulo,cad);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TITULO_BAR",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EJEX_BAR ::= ejex DOSPUNTOS DOSPUNTOS CHAR IGUAL COR_IZQ EXP_SUCESIVASGRAF COR_DER 
            {
              Object RESULT =null;
		int eje_xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int eje_xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String eje_x = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object exp_s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		graficasBarras.put(eje_x,exp_s.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EJEX_BAR",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EJEX_BAR ::= ejex DOSPUNTOS DOSPUNTOS CHAR IGUAL EXP_SUCESIVASGRAF 
            {
              Object RESULT =null;
		int eje_xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int eje_xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String eje_x = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp_s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficasBarras.put(eje_x,exp_s.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EJEX_BAR",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EJEY_BAR ::= ejey DOSPUNTOS DOSPUNTOS DOUBLE IGUAL COR_IZQ EXP_SUCESIVASGRAF COR_DER 
            {
              Object RESULT =null;
		int eje_yleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int eje_yright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String eje_y = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object exp_s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		graficasBarras.put(eje_y,exp_s.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EJEY_BAR",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EJEY_BAR ::= ejey DOSPUNTOS DOSPUNTOS DOUBLE IGUAL EXP_SUCESIVASGRAF 
            {
              Object RESULT =null;
		int eje_yleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int eje_yright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String eje_y = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp_s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficasBarras.put(eje_y,exp_s.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EJEY_BAR",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TITULOX_BAR ::= titulox DOSPUNTOS DOSPUNTOS CHAR IGUAL valores_grafica 
            {
              Object RESULT =null;
		int titulo_xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int titulo_xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String titulo_x = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficasBarras.put(titulo_x,cad.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TITULOX_BAR",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TITULOY_BAR ::= tituloy DOSPUNTOS DOSPUNTOS CHAR IGUAL valores_grafica 
            {
              Object RESULT =null;
		int titulo_yleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int titulo_yright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String titulo_y = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficasBarras.put(titulo_y,cad.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TITULOY_BAR",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXEC_BAR ::= exec graphbar 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String ex = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int graph_left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int graph_right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String graph_ = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficasBarras.put(ex,graph_);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXEC_BAR",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // GRAFPIE ::= graphpie PAR_IZQ SENTENCIAS_PIE PAR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GRAFPIE",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIAS_PIE ::= SENTENCIAS_PIE PIE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_PIE",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIAS_PIE ::= PIE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_PIE",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PIE ::= TITULO_PIE END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PIE",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PIE ::= LABEL_PIE END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PIE",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PIE ::= VALUES_PIE END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PIE",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PIE ::= EXEC_PIE END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PIE",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TITULO_PIE ::= titulo DOSPUNTOS DOSPUNTOS CHAR IGUAL valores_grafica 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficasPie.put(titulo,cad.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TITULO_PIE",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LABEL_PIE ::= label DOSPUNTOS DOSPUNTOS CHAR IGUAL COR_IZQ EXP_SUCESIVASGRAF COR_DER 
            {
              Object RESULT =null;
		int lableft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int labright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String lab = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object exp_s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		graficasPie.put(lab,exp_s.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LABEL_PIE",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LABEL_PIE ::= label DOSPUNTOS DOSPUNTOS CHAR IGUAL EXP_SUCESIVASGRAF 
            {
              Object RESULT =null;
		int lableft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int labright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String lab = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp_s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficasPie.put(lab,exp_s.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LABEL_PIE",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VALUES_PIE ::= values DOSPUNTOS DOSPUNTOS DOUBLE IGUAL COR_IZQ EXP_SUCESIVASGRAF COR_DER 
            {
              Object RESULT =null;
		int valuleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int valuright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String valu = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object exp_s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		graficasPie.put(valu,exp_s.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALUES_PIE",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VALUES_PIE ::= values DOSPUNTOS DOSPUNTOS DOUBLE IGUAL EXP_SUCESIVASGRAF 
            {
              Object RESULT =null;
		int valuleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int valuright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String valu = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp_s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficasPie.put(valu,exp_s.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALUES_PIE",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXEC_PIE ::= exec graphpie 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String ex = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int graph_left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int graph_right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String graph_ = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficasPie.put(ex,graph_);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXEC_PIE",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // GRAFLINEAL ::= graphline PAR_IZQ SENTENCIAS_LINE PAR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GRAFLINEAL",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIAS_LINE ::= SENTENCIAS_LINE LINE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_LINE",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIAS_LINE ::= LINE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_LINE",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LINE ::= TITULO_LINE END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINE",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LINE ::= EJEX_LINE END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINE",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LINE ::= EJEY_LINE END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINE",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LINE ::= TITULOX_LINE END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINE",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LINE ::= TITULOY_LINE END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINE",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LINE ::= EXEC_LINE END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINE",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TITULO_LINE ::= titulo DOSPUNTOS DOSPUNTOS CHAR IGUAL CADENA 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficaLineal.put(titulo,cad);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TITULO_LINE",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EJEX_LINE ::= ejex DOSPUNTOS DOSPUNTOS CHAR IGUAL COR_IZQ EXP_SUCESIVASGRAF COR_DER 
            {
              Object RESULT =null;
		int eje_xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int eje_xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String eje_x = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object exp_s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		graficaLineal.put(eje_x,exp_s.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EJEX_LINE",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EJEX_LINE ::= ejex DOSPUNTOS DOSPUNTOS CHAR IGUAL EXP_SUCESIVASGRAF 
            {
              Object RESULT =null;
		int eje_xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int eje_xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String eje_x = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp_s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficaLineal.put(eje_x,exp_s.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EJEX_LINE",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EJEY_LINE ::= ejey DOSPUNTOS DOSPUNTOS DOUBLE IGUAL COR_IZQ EXP_SUCESIVASGRAF COR_DER 
            {
              Object RESULT =null;
		int eje_yleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int eje_yright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String eje_y = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object exp_s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		graficaLineal.put(eje_y,exp_s.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EJEY_LINE",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EJEY_LINE ::= ejey DOSPUNTOS DOSPUNTOS DOUBLE IGUAL EXP_SUCESIVASGRAF 
            {
              Object RESULT =null;
		int eje_yleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int eje_yright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String eje_y = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp_s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficaLineal.put(eje_y,exp_s.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EJEY_LINE",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TITULOX_LINE ::= titulox DOSPUNTOS DOSPUNTOS CHAR IGUAL valores_grafica 
            {
              Object RESULT =null;
		int titulo_xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int titulo_xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String titulo_x = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficaLineal.put(titulo_x,cad.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TITULOX_LINE",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TITULOY_LINE ::= tituloy DOSPUNTOS DOSPUNTOS CHAR IGUAL valores_grafica 
            {
              Object RESULT =null;
		int titulo_yleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int titulo_yright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String titulo_y = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficaLineal.put(titulo_y,cad.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TITULOY_LINE",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXEC_LINE ::= exec graphline 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String ex = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int graph_left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int graph_right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String graph_ = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficaLineal.put(ex,graph_);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXEC_LINE",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TIPO ::= CHAR 
            {
              Object RESULT =null;
		int char_left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int char_right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String char_ = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = char_; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TIPO ::= DOUBLE 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = num; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP_SUCESIVASGRAF ::= EXP_SUCESIVASGRAF COMA valores_grafica 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = val1.toString()+"="+val2.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_SUCESIVASGRAF",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP_SUCESIVASGRAF ::= valores_grafica 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT =val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_SUCESIVASGRAF",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXP_SUCESIVAS ::= EXP_SUCESIVAS COMA valores_print 
            {
              LinkedList<Expresions> RESULT =null;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Expresions> exp_s = (LinkedList<Expresions>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresions val = (Expresions)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp_s; RESULT.add(val); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_SUCESIVAS",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP_SUCESIVAS ::= valores_print 
            {
              LinkedList<Expresions> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresions val = (Expresions)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(val); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_SUCESIVAS",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXP_SUCESIVASARR ::= EXP_SUCESIVASARR COMA valores_variable 
            {
              Object RESULT =null;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object exp_s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp_s.toString()+","+val.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_SUCESIVASARR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXP_SUCESIVASARR ::= valores_variable 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = val;  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_SUCESIVASARR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // valores_grafica ::= NUMERO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT =num;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_grafica",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // valores_grafica ::= CADENA 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = cad;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_grafica",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // valores_grafica ::= ID_DECLA 
            {
              Object RESULT =null;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT= id_var; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_grafica",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // valores_grafica ::= ARR_DECLA 
            {
              Object RESULT =null;
		int id_arrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id_arrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id_arr = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= id_arr;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_grafica",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // valores_print ::= NUMERO 
            {
              Expresions RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Valores(num,Valores.Datatype.DECIMAL,numright,numleft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_print",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // valores_print ::= CADENA 
            {
              Expresions RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Valores(cad,Valores.Datatype.CADENA,cadright,cadleft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_print",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // valores_print ::= OP_ARITMETICA 
            {
              Expresions RESULT =null;
		int opearileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int opeariright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object opeari = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Valores(opeari.toString(),Valores.Datatype.DECIMAL,opeariright,opearileft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_print",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // valores_print ::= OP_ESTADISTICA 
            {
              Expresions RESULT =null;
		int opeEstleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int opeEstright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object opeEst = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Valores(opeEst.toString(),Valores.Datatype.DECIMAL,opeEstright,opeEstleft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_print",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // valores_print ::= ID_DECLA 
            {
              Expresions RESULT =null;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Valores(id_var.toString(),Valores.Datatype.CADENA,id_varright,id_varleft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_print",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // valores_print ::= ARR_DECLA 
            {
              Expresions RESULT =null;
		int id_arrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id_arrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id_arr = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Valores(id_arr.toString(),Valores.Datatype.CADENA,id_arrright,id_arrleft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_print",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ID_DECLA ::= ID 
            {
              Object RESULT =null;
		int id_left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id_right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id_ = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = findvariable(id_); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ID_DECLA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ARR_DECLA ::= ID_ARRAY 
            {
              Object RESULT =null;
		int id_arrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id_arrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id_arr = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = findvariablearr(id_arr); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARR_DECLA",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // valores_variable ::= NUMERO 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String numero = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = numero; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_variable",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // valores_variable ::= CADENA 
            {
              Object RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = cadena; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_variable",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // valores_variable ::= OP_ARITMETICA 
            {
              Object RESULT =null;
		int operArileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int operAriright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object operAri = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= operAri;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_variable",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // valores_variable ::= OP_ESTADISTICA 
            {
              Object RESULT =null;
		int operEstleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int operEstright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object operEst = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= operEst;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_variable",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // valores_variable ::= ID_DECLA 
            {
              Object RESULT =null;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = id_var; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_variable",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
