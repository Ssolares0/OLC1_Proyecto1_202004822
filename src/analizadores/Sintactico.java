
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import expressions.Valores;
import sentence.print;
import sentence.erro;
import sentence.declaracionArray;
import sentence.declaracion;
import abstracto.Expresions;
import abstracto.sentencia;
import abstracto.Types;
import abstracto.Types.Type;
import java.util.ArrayList;
import dataforge.Errores;
import analizadores.funcionesUsar;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\002\004\000\002\002\005\000\002\024" +
    "\004\000\002\024\003\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\004\012\000\002" +
    "\017\015\000\002\014\010\000\002\047\002\000\002\016" +
    "\015\000\002\012\003\000\002\012\003\000\002\020\006" +
    "\000\002\020\006\000\002\020\006\000\002\020\006\000" +
    "\002\020\006\000\002\021\010\000\002\021\010\000\002" +
    "\021\010\000\002\021\010\000\002\021\010\000\002\021" +
    "\010\000\002\006\005\000\002\006\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\010\005\000" +
    "\002\010\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\027\006\000\002\030\004\000\002\030" +
    "\003\000\002\031\005\000\002\031\005\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\032\010\000\002\035\012\000\002" +
    "\036\012\000\002\033\010\000\002\034\010\000\002\037" +
    "\004\000\002\040\006\000\002\041\004\000\002\041\003" +
    "\000\002\042\005\000\002\042\005\000\002\042\005\000" +
    "\002\042\005\000\002\043\010\000\002\045\012\000\002" +
    "\046\012\000\002\044\004\000\002\005\003\000\002\005" +
    "\003\000\002\026\005\000\002\026\003\000\002\025\005" +
    "\000\002\025\003\000\002\023\003\000\002\023\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\004\046\005\001\002\000\004\002\u0101\001" +
    "\002\000\016\003\015\017\021\041\012\044\006\050\023" +
    "\051\017\001\002\000\004\013\367\001\002\000\020\003" +
    "\ufffe\017\ufffe\041\ufffe\044\ufffe\047\ufffe\050\ufffe\051\ufffe" +
    "\001\002\000\004\045\365\001\002\000\004\045\363\001" +
    "\002\000\004\013\346\001\002\000\004\045\344\001\002" +
    "\000\020\003\015\017\021\041\012\044\006\047\343\050" +
    "\023\051\017\001\002\000\004\045\340\001\002\000\004" +
    "\045\336\001\002\000\004\023\266\001\002\000\004\045" +
    "\264\001\002\000\004\013\132\001\002\000\004\045\130" +
    "\001\002\000\004\023\024\001\002\000\016\054\033\055" +
    "\037\056\035\057\034\060\031\063\036\001\002\000\004" +
    "\045\126\001\002\000\004\045\124\001\002\000\020\024" +
    "\123\054\033\055\037\056\035\057\034\060\031\063\036" +
    "\001\002\000\020\024\uffd8\054\uffd8\055\uffd8\056\uffd8\057" +
    "\uffd8\060\uffd8\063\uffd8\001\002\000\004\013\115\001\002" +
    "\000\004\045\113\001\002\000\004\013\106\001\002\000" +
    "\004\013\101\001\002\000\004\013\072\001\002\000\006" +
    "\050\071\051\070\001\002\000\004\013\054\001\002\000" +
    "\004\045\052\001\002\000\004\045\050\001\002\000\004" +
    "\045\046\001\002\000\004\045\044\001\002\000\004\014" +
    "\045\001\002\000\020\024\uffd7\054\uffd7\055\uffd7\056\uffd7" +
    "\057\uffd7\060\uffd7\063\uffd7\001\002\000\004\014\047\001" +
    "\002\000\020\024\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1" +
    "\060\uffd1\063\uffd1\001\002\000\004\014\051\001\002\000" +
    "\020\024\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6" +
    "\063\uffd6\001\002\000\004\014\053\001\002\000\020\024" +
    "\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\063\uffd5" +
    "\001\002\000\004\013\055\001\002\000\004\043\056\001" +
    "\002\000\004\022\057\001\002\000\004\007\060\001\002" +
    "\000\006\004\061\005\064\001\002\000\006\006\uffb9\010" +
    "\uffb9\001\002\000\006\006\065\010\066\001\002\000\006" +
    "\006\uffbc\010\uffbc\001\002\000\006\006\uffb8\010\uffb8\001" +
    "\002\000\006\004\061\005\064\001\002\000\004\045\uffcf" +
    "\001\002\000\006\006\uffbd\010\uffbd\001\002\000\004\045" +
    "\uffc0\001\002\000\004\045\uffcb\001\002\000\004\013\073" +
    "\001\002\000\004\042\074\001\002\000\004\022\075\001" +
    "\002\000\004\007\076\001\002\000\006\004\061\005\064" +
    "\001\002\000\006\006\065\010\100\001\002\000\004\045" +
    "\uffce\001\002\000\004\013\102\001\002\000\004\043\103" +
    "\001\002\000\004\022\104\001\002\000\004\005\105\001" +
    "\002\000\004\045\uffcd\001\002\000\004\013\107\001\002" +
    "\000\004\043\110\001\002\000\004\022\111\001\002\000" +
    "\004\005\112\001\002\000\004\045\uffd0\001\002\000\004" +
    "\014\114\001\002\000\020\024\uffd4\054\uffd4\055\uffd4\056" +
    "\uffd4\057\uffd4\060\uffd4\063\uffd4\001\002\000\004\013\116" +
    "\001\002\000\004\043\117\001\002\000\004\022\120\001" +
    "\002\000\004\005\121\001\002\000\004\045\uffcc\001\002" +
    "\000\020\024\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060" +
    "\uffd9\063\uffd9\001\002\000\004\045\uffda\001\002\000\004" +
    "\014\125\001\002\000\020\024\uffd2\054\uffd2\055\uffd2\056" +
    "\uffd2\057\uffd2\060\uffd2\063\uffd2\001\002\000\004\014\127" +
    "\001\002\000\020\024\uffd3\054\uffd3\055\uffd3\056\uffd3\057" +
    "\uffd3\060\uffd3\063\uffd3\001\002\000\004\014\131\001\002" +
    "\000\020\003\ufff9\017\ufff9\041\ufff9\044\ufff9\047\ufff9\050" +
    "\ufff9\051\ufff9\001\002\000\004\013\133\001\002\000\006" +
    "\020\135\021\134\001\002\000\004\022\262\001\002\000" +
    "\004\022\136\001\002\000\006\005\141\015\137\001\002" +
    "\000\004\012\ufff0\001\002\000\004\012\142\001\002\000" +
    "\004\012\ufff1\001\002\000\004\007\143\001\002\000\034" +
    "\004\154\005\144\026\155\027\157\030\152\031\162\032" +
    "\145\033\147\034\156\035\160\036\150\037\161\040\153" +
    "\001\002\000\010\006\uffb6\010\uffb6\045\uffb6\001\002\000" +
    "\004\023\257\001\002\000\010\006\uffb4\010\uffb4\045\uffb4" +
    "\001\002\000\004\023\252\001\002\000\004\023\245\001" +
    "\002\000\010\006\uffba\010\uffba\045\uffba\001\002\000\004" +
    "\023\242\001\002\000\004\023\235\001\002\000\010\006" +
    "\uffb7\010\uffb7\045\uffb7\001\002\000\004\023\232\001\002" +
    "\000\004\023\225\001\002\000\004\023\222\001\002\000" +
    "\004\023\215\001\002\000\004\023\202\001\002\000\004" +
    "\023\171\001\002\000\006\006\165\010\ufff3\001\002\000" +
    "\010\006\uffb5\010\uffb5\045\uffb5\001\002\000\034\004\154" +
    "\005\144\026\155\027\157\030\152\031\162\032\145\033" +
    "\147\034\156\035\160\036\150\037\161\040\153\001\002" +
    "\000\004\010\167\001\002\000\004\045\ufff2\001\002\000" +
    "\010\006\uffbb\010\uffbb\045\uffbb\001\002\000\032\004\175" +
    "\026\155\027\157\030\152\031\162\032\145\033\147\034" +
    "\156\035\160\036\150\037\161\040\153\001\002\000\006" +
    "\006\177\024\200\001\002\000\006\006\uffe1\024\uffe1\001" +
    "\002\000\006\006\uffe3\024\uffe3\001\002\000\006\006\uffe0" +
    "\024\uffe0\001\002\000\006\006\uffe2\024\uffe2\001\002\000" +
    "\032\004\175\026\155\027\157\030\152\031\162\032\145" +
    "\033\147\034\156\035\160\036\150\037\161\040\153\001" +
    "\002\000\012\006\uffec\010\uffec\024\uffec\045\uffec\001\002" +
    "\000\006\006\uffe4\024\uffe4\001\002\000\004\007\203\001" +
    "\002\000\032\004\207\026\155\027\157\030\152\031\162" +
    "\032\145\033\147\034\156\035\160\036\150\037\161\040" +
    "\153\001\002\000\006\006\uffde\010\uffde\001\002\000\006" +
    "\006\211\010\212\001\002\000\006\006\uffdd\010\uffdd\001" +
    "\002\000\006\006\uffdb\010\uffdb\001\002\000\006\006\uffdc" +
    "\010\uffdc\001\002\000\032\004\207\026\155\027\157\030" +
    "\152\031\162\032\145\033\147\034\156\035\160\036\150" +
    "\037\161\040\153\001\002\000\004\024\213\001\002\000" +
    "\012\006\uffe6\010\uffe6\024\uffe6\045\uffe6\001\002\000\006" +
    "\006\uffdf\010\uffdf\001\002\000\004\007\216\001\002\000" +
    "\032\004\207\026\155\027\157\030\152\031\162\032\145" +
    "\033\147\034\156\035\160\036\150\037\161\040\153\001" +
    "\002\000\006\006\211\010\220\001\002\000\004\024\221" +
    "\001\002\000\012\006\uffe8\010\uffe8\024\uffe8\045\uffe8\001" +
    "\002\000\032\004\175\026\155\027\157\030\152\031\162" +
    "\032\145\033\147\034\156\035\160\036\150\037\161\040" +
    "\153\001\002\000\006\006\177\024\224\001\002\000\012" +
    "\006\uffee\010\uffee\024\uffee\045\uffee\001\002\000\004\007" +
    "\226\001\002\000\032\004\207\026\155\027\157\030\152" +
    "\031\162\032\145\033\147\034\156\035\160\036\150\037" +
    "\161\040\153\001\002\000\006\006\211\010\230\001\002" +
    "\000\004\024\231\001\002\000\012\006\uffe9\010\uffe9\024" +
    "\uffe9\045\uffe9\001\002\000\032\004\175\026\155\027\157" +
    "\030\152\031\162\032\145\033\147\034\156\035\160\036" +
    "\150\037\161\040\153\001\002\000\006\006\177\024\234" +
    "\001\002\000\012\006\uffef\010\uffef\024\uffef\045\uffef\001" +
    "\002\000\004\007\236\001\002\000\032\004\207\026\155" +
    "\027\157\030\152\031\162\032\145\033\147\034\156\035" +
    "\160\036\150\037\161\040\153\001\002\000\006\006\211" +
    "\010\240\001\002\000\004\024\241\001\002\000\012\006" +
    "\uffe5\010\uffe5\024\uffe5\045\uffe5\001\002\000\032\004\175" +
    "\026\155\027\157\030\152\031\162\032\145\033\147\034" +
    "\156\035\160\036\150\037\161\040\153\001\002\000\006" +
    "\006\177\024\244\001\002\000\012\006\uffed\010\uffed\024" +
    "\uffed\045\uffed\001\002\000\004\007\246\001\002\000\032" +
    "\004\207\026\155\027\157\030\152\031\162\032\145\033" +
    "\147\034\156\035\160\036\150\037\161\040\153\001\002" +
    "\000\006\006\211\010\250\001\002\000\004\024\251\001" +
    "\002\000\012\006\uffe7\010\uffe7\024\uffe7\045\uffe7\001\002" +
    "\000\004\007\253\001\002\000\032\004\207\026\155\027" +
    "\157\030\152\031\162\032\145\033\147\034\156\035\160" +
    "\036\150\037\161\040\153\001\002\000\006\006\211\010" +
    "\255\001\002\000\004\024\256\001\002\000\012\006\uffea" +
    "\010\uffea\024\uffea\045\uffea\001\002\000\032\004\175\026" +
    "\155\027\157\030\152\031\162\032\145\033\147\034\156" +
    "\035\160\036\150\037\161\040\153\001\002\000\006\006" +
    "\177\024\261\001\002\000\012\006\uffeb\010\uffeb\024\uffeb" +
    "\045\uffeb\001\002\000\034\004\154\005\144\026\155\027" +
    "\157\030\152\031\162\032\145\033\147\034\156\035\160" +
    "\036\150\037\161\040\153\001\002\000\006\006\165\045" +
    "\ufff4\001\002\000\004\014\265\001\002\000\020\003\ufffd" +
    "\017\ufffd\041\ufffd\044\ufffd\047\ufffd\050\ufffd\051\ufffd\001" +
    "\002\000\012\054\270\061\275\062\272\063\271\001\002" +
    "\000\004\045\334\001\002\000\004\013\327\001\002\000" +
    "\004\051\070\001\002\000\004\013\320\001\002\000\004" +
    "\045\316\001\002\000\004\045\314\001\002\000\004\013" +
    "\305\001\002\000\004\045\303\001\002\000\014\024\301" +
    "\054\270\061\275\062\272\063\271\001\002\000\014\024" +
    "\uffc8\054\uffc8\061\uffc8\062\uffc8\063\uffc8\001\002\000\004" +
    "\045\uffca\001\002\000\014\024\uffc9\054\uffc9\061\uffc9\062" +
    "\uffc9\063\uffc9\001\002\000\004\014\304\001\002\000\014" +
    "\024\uffc4\054\uffc4\061\uffc4\062\uffc4\063\uffc4\001\002\000" +
    "\004\013\306\001\002\000\004\042\307\001\002\000\004" +
    "\022\310\001\002\000\004\007\311\001\002\000\006\004" +
    "\061\005\064\001\002\000\006\006\065\010\313\001\002" +
    "\000\004\045\uffc1\001\002\000\004\014\315\001\002\000" +
    "\014\024\uffc6\054\uffc6\061\uffc6\062\uffc6\063\uffc6\001\002" +
    "\000\004\014\317\001\002\000\014\024\uffc7\054\uffc7\061" +
    "\uffc7\062\uffc7\063\uffc7\001\002\000\004\013\321\001\002" +
    "\000\004\043\322\001\002\000\004\022\323\001\002\000" +
    "\004\007\324\001\002\000\006\004\061\005\064\001\002" +
    "\000\006\006\065\010\326\001\002\000\004\045\uffc2\001" +
    "\002\000\004\013\330\001\002\000\004\043\331\001\002" +
    "\000\004\022\332\001\002\000\004\005\333\001\002\000" +
    "\004\045\uffc3\001\002\000\004\014\335\001\002\000\014" +
    "\024\uffc5\054\uffc5\061\uffc5\062\uffc5\063\uffc5\001\002\000" +
    "\004\014\337\001\002\000\020\003\ufff8\017\ufff8\041\ufff8" +
    "\044\ufff8\047\ufff8\050\ufff8\051\ufff8\001\002\000\004\014" +
    "\341\001\002\000\020\003\ufff7\017\ufff7\041\ufff7\044\ufff7" +
    "\047\ufff7\050\ufff7\051\ufff7\001\002\000\020\003\uffff\017" +
    "\uffff\041\uffff\044\uffff\047\uffff\050\uffff\051\uffff\001\002" +
    "\000\004\002\000\001\002\000\004\014\345\001\002\000" +
    "\020\003\ufffa\017\ufffa\041\ufffa\044\ufffa\047\ufffa\050\ufffa" +
    "\051\ufffa\001\002\000\006\042\347\043\350\001\002\000" +
    "\004\013\uffbe\001\002\000\004\013\uffbf\001\002\000\004" +
    "\013\352\001\002\000\004\013\353\001\002\000\004\015" +
    "\354\001\002\000\004\011\355\001\002\000\034\004\360" +
    "\005\356\026\155\027\157\030\152\031\162\032\145\033" +
    "\147\034\156\035\160\036\150\037\161\040\153\001\002" +
    "\000\004\045\uffb2\001\002\000\004\045\uffb0\001\002\000" +
    "\004\045\uffb3\001\002\000\004\045\ufff6\001\002\000\004" +
    "\045\uffb1\001\002\000\004\014\364\001\002\000\020\003" +
    "\ufffb\017\ufffb\041\ufffb\044\ufffb\047\ufffb\050\ufffb\051\ufffb" +
    "\001\002\000\004\014\366\001\002\000\020\003\ufffc\017" +
    "\ufffc\041\ufffc\044\ufffc\047\ufffc\050\ufffc\051\ufffc\001\002" +
    "\000\006\042\347\043\350\001\002\000\004\013\371\001" +
    "\002\000\004\013\372\001\002\000\004\025\373\001\002" +
    "\000\004\015\374\001\002\000\004\011\375\001\002\000" +
    "\004\007\376\001\002\000\034\004\154\005\144\026\155" +
    "\027\157\030\152\031\162\032\145\033\147\034\156\035" +
    "\160\036\150\037\161\040\153\001\002\000\006\006\165" +
    "\010\u0100\001\002\000\004\045\ufff5\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\004\002\003\001\001\000\002\001\001\000" +
    "\022\003\006\004\010\014\017\016\007\017\012\024\013" +
    "\027\021\040\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\341\004\010\014\017\016" +
    "\007\017\012\027\021\040\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\030\026\031\027\032\042\033\031\034\024\035\040\036" +
    "\037\037\025\044\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\031\121\032\042\033\031\034\024\035" +
    "\040\036\037\037\025\044\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\062\026\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\023\062\026\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\013\150" +
    "\020\163\021\145\025\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\165\001\001\000\002\001\001" +
    "\000\010\013\167\020\163\021\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\006\171" +
    "\007\173\020\175\021\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\200\020\175\021\172\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\010\204\011\203\020\207\021\205\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\213\020\207\021\205\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\010\216\011\203\020\207\021" +
    "\205\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\222\007\173\020\175\021\172\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\010\226\011\203\020\207\021\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\232\007\173\020\175\021\172\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\236" +
    "\011\203\020\207\021\205\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\242\007\173" +
    "\020\175\021\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\010\246\011\203\020\207" +
    "\021\205\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\253\011\203" +
    "\020\207\021\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\257\007\173\020\175" +
    "\021\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\150\020\163\021\145\025\262\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\041" +
    "\276\042\277\043\272\044\275\045\273\046\266\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\042\301\043\272\044" +
    "\275\045\273\046\266\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\062\026\311\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\062\026\324\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\350\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\015\360\020\361\021\356\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\367" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\013\150\020\163\021\145\025\376\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    public ArrayList<Errores> errSint = new ArrayList<Errores>();

    public HashMap<String,String> graficasBarras = new HashMap<String,String>();
    public HashMap<String,String> graficasPie = new HashMap<String,String>();
    

    public LinkedList<sentencia>AST;
    

    public LinkedList<sentencia>getAST(){
    
        return AST;

    }



    public static String buscarVariable(String id){
        declaracion miDeclaracion = new declaracion("miID", "miValor", 1, 1);

        // Llamada a la función obtenerValorPorID
        String valorEncontrado = miDeclaracion.obtenerValorPorID(id);

        if (valorEncontrado != null) {
            System.out.println("Valor encontrado: " + valorEncontrado);
            return valorEncontrado;
        } else {
            System.out.println("ID no encontrado.");
        }
        return valorEncontrado;
    
 
    
    } 

    
    
   
    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
            Errores tmp = new Errores("Sintactico",s.right,s.left, s.value+"Error de sintaxis");
            errSint.add(tmp);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
            Errores tmp = new Errores("Sintactico",s.right,s.left, s.value+"Error de sintaxis sin recuperacion");
            errSint.add(tmp);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {

  
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= PROGRAM INSTRUCCIONES ENDPROGRAM 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<sentencia> b = (LinkedList<sentencia>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 parser.AST=b; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<sentencia> a = (LinkedList<sentencia>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		sentencia b = (sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT= a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		sentencia a = (sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= IMPRIMIR_EXP END PUNTOYCOMA 
            {
              sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		print a = (print)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT =a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= IMPRIMIR_ARRAY END PUNTOYCOMA 
            {
              sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		print a = (print)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= DECLARACION END PUNTOYCOMA 
            {
              sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		declaracion a = (declaracion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= Dec_Arreglo END PUNTOYCOMA 
            {
              sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		declaracionArray a = (declaracionArray)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= GRAFBARRAS END PUNTOYCOMA 
            {
              sentencia RESULT =null;
		RESULT= new erro("error sint");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= GRAFPIE END PUNTOYCOMA 
            {
              sentencia RESULT =null;
		RESULT= new erro("NUEVA GRAFICA PIE");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= error END PUNTOYCOMA 
            {
              sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT= new erro("error sint"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACION ::= VAR DOSPUNTOS TIPO DOSPUNTOS DOSPUNTOS ID ASSIGN valores_variable 
            {
              declaracion RESULT =null;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id_var = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int exp_valeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exp_varight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp_va = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new declaracion(id_var,exp_va.toString(),exp_varight,exp_valeft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Dec_Arreglo ::= ARR DOSPUNTOS TIPO DOSPUNTOS DOSPUNTOS ARROBA ID ASSIGN COR_IZQ EXP_SUCESIVAS COR_DER 
            {
              declaracionArray RESULT =null;
		int tipo_arrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int tipo_arrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object tipo_arr = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int id_arrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int id_arrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id_arr = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Expresions> exp_s = (LinkedList<Expresions>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new declaracionArray(exp_s,exp_sright, exp_sleft,tipo_arr.toString(),id_arr.toString()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Dec_Arreglo",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IMPRIMIR_EXP ::= CONSOLE DOSPUNTOS DOSPUNTOS PRINT IGUAL EXP_SUCESIVAS 
            {
              print RESULT =null;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Expresions> exp_s = (LinkedList<Expresions>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new print(exp_s,exp_sright, exp_sleft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR_EXP",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$0 ::= 
            {
              print RESULT =null;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Expresions> exp_s = (LinkedList<Expresions>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 RESULT = new print(exp_s,exp_sright, exp_sleft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IMPRIMIR_ARRAY ::= CONSOLE DOSPUNTOS DOSPUNTOS COLUMN IGUAL EXP_TITULO ASSIGN2 COR_IZQ EXP_SUCESIVAS NT$0 COR_DER 
            {
              print RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (print) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Expresions> exp_s = (LinkedList<Expresions>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR_ARRAY",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXP_TITULO ::= CADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_TITULO",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXP_TITULO ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_TITULO",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OP_ARITMETICA ::= sum PAR_IZQ OP PAR_DER 
            {
              Object RESULT =null;
		int sumleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String sum = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		double resultado = funcionesUsar.operacionAritmetica(sum, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OP_ARITMETICA ::= res PAR_IZQ OP PAR_DER 
            {
              Object RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String res = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		double resultado = funcionesUsar.operacionAritmetica(res, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OP_ARITMETICA ::= mul PAR_IZQ OP PAR_DER 
            {
              Object RESULT =null;
		int mulleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int mulright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String mul = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		double resultado = funcionesUsar.operacionAritmetica(mul, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OP_ARITMETICA ::= mod PAR_IZQ OP PAR_DER 
            {
              Object RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String mod = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		double resultado = funcionesUsar.operacionAritmetica(mod, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OP_ARITMETICA ::= div PAR_IZQ OP PAR_DER 
            {
              Object RESULT =null;
		int divleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int divright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String div = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		double resultado = funcionesUsar.operacionAritmetica(div, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OP_ESTADISTICA ::= media PAR_IZQ COR_IZQ OP3 COR_DER PAR_DER 
            {
              Object RESULT =null;
		int medialeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int mediaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String media = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		double resultado = funcionesUsar.operacionEstadistica(media, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ESTADISTICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OP_ESTADISTICA ::= mediana PAR_IZQ COR_IZQ OP3 COR_DER PAR_DER 
            {
              Object RESULT =null;
		int medianaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int medianaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String mediana = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		double resultado = funcionesUsar.operacionEstadistica(mediana, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ESTADISTICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OP_ESTADISTICA ::= moda PAR_IZQ COR_IZQ OP3 COR_DER PAR_DER 
            {
              Object RESULT =null;
		int modaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int modaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String moda = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		double resultado = funcionesUsar.operacionEstadistica(moda, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ESTADISTICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OP_ESTADISTICA ::= varianza PAR_IZQ COR_IZQ OP3 COR_DER PAR_DER 
            {
              Object RESULT =null;
		int varianzaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int varianzaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String varianza = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		double resultado = funcionesUsar.operacionEstadistica(varianza, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ESTADISTICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OP_ESTADISTICA ::= max PAR_IZQ COR_IZQ OP3 COR_DER PAR_DER 
            {
              Object RESULT =null;
		int maxleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String max = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		double resultado = funcionesUsar.operacionEstadistica(max, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ESTADISTICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OP_ESTADISTICA ::= min PAR_IZQ COR_IZQ OP3 COR_DER PAR_DER 
            {
              Object RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String min = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		double resultado = funcionesUsar.operacionEstadistica(min, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ESTADISTICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OP ::= OP COMA OP2 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = val1.toString()+"="+val2.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OP ::= OP2 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT =val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OP2 ::= OP_ARITMETICA 
            {
              Object RESULT =null;
		int resuArileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int resuAriright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object resuAri = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= resuAri;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP2",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OP2 ::= OP_ESTADISTICA 
            {
              Object RESULT =null;
		int resuEstleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int resuEstright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object resuEst = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= resuEst; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP2",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OP2 ::= NUMERO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=num; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP2",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OP3 ::= OP3 COMA OP4 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = val1.toString()+"="+val2.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP3",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OP3 ::= OP4 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT =val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP3",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OP4 ::= OP_ESTADISTICA 
            {
              Object RESULT =null;
		int resuEstleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int resuEstright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object resuEst = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= resuEst; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP4",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OP4 ::= OP_ARITMETICA 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT =num; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP4",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OP4 ::= NUMERO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=num; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP4",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // GRAFBARRAS ::= graphbar PAR_IZQ SENTENCIAS_BAR PAR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GRAFBARRAS",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIAS_BAR ::= SENTENCIAS_BAR BAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_BAR",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIAS_BAR ::= BAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_BAR",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BAR ::= TITULO_BAR END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BAR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BAR ::= EJEX_BAR END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BAR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BAR ::= EJEY_BAR END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BAR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BAR ::= TITULOX_BAR END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BAR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BAR ::= TITULOY_BAR END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BAR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BAR ::= EXEC_BAR END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BAR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BAR ::= EXEC_PIE END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BAR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TITULO_BAR ::= titulo DOSPUNTOS DOSPUNTOS CHAR IGUAL CADENA 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficasBarras.put(titulo,cad);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TITULO_BAR",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EJEX_BAR ::= ejex DOSPUNTOS DOSPUNTOS CHAR IGUAL COR_IZQ EXP_SUCESIVASGRAF COR_DER 
            {
              Object RESULT =null;
		int eje_xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int eje_xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String eje_x = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object exp_s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		graficasBarras.put(eje_x,exp_s.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EJEX_BAR",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EJEY_BAR ::= ejey DOSPUNTOS DOSPUNTOS DOUBLE IGUAL COR_IZQ EXP_SUCESIVASGRAF COR_DER 
            {
              Object RESULT =null;
		int eje_yleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int eje_yright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String eje_y = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object exp_s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		graficasBarras.put(eje_y,exp_s.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EJEY_BAR",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TITULOX_BAR ::= titulox DOSPUNTOS DOSPUNTOS CHAR IGUAL CADENA 
            {
              Object RESULT =null;
		int titulo_xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int titulo_xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String titulo_x = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficasBarras.put(titulo_x,cad);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TITULOX_BAR",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TITULOY_BAR ::= tituloy DOSPUNTOS DOSPUNTOS CHAR IGUAL CADENA 
            {
              Object RESULT =null;
		int titulo_yleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int titulo_yright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String titulo_y = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficasBarras.put(titulo_y,cad);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TITULOY_BAR",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXEC_BAR ::= exec graphbar 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String ex = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int graph_left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int graph_right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String graph_ = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficasBarras.put(ex,graph_);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXEC_BAR",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // GRAFPIE ::= graphpie PAR_IZQ SENTENCIAS_PIE PAR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GRAFPIE",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIAS_PIE ::= SENTENCIAS_PIE PIE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_PIE",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIAS_PIE ::= PIE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_PIE",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PIE ::= TITULO_PIE END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PIE",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PIE ::= LABEL_PIE END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PIE",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PIE ::= VALUES_PIE END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PIE",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PIE ::= EXEC_PIE END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PIE",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TITULO_PIE ::= titulo DOSPUNTOS DOSPUNTOS CHAR IGUAL CADENA 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficasPie.put(titulo,cad);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TITULO_PIE",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LABEL_PIE ::= label DOSPUNTOS DOSPUNTOS CHAR IGUAL COR_IZQ EXP_SUCESIVASGRAF COR_DER 
            {
              Object RESULT =null;
		int lableft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int labright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String lab = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object exp_s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		graficasPie.put(lab,exp_s.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LABEL_PIE",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VALUES_PIE ::= values DOSPUNTOS DOSPUNTOS DOUBLE IGUAL COR_IZQ EXP_SUCESIVASGRAF COR_DER 
            {
              Object RESULT =null;
		int valuleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int valuright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String valu = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object exp_s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		graficasPie.put(valu,exp_s.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALUES_PIE",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXEC_PIE ::= exec graphpie 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String ex = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int graph_left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int graph_right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String graph_ = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficasPie.put(ex,graph_);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXEC_PIE",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TIPO ::= CHAR 
            {
              Object RESULT =null;
		int char_left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int char_right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String char_ = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = char_; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TIPO ::= DOUBLE 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = num; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP_SUCESIVASGRAF ::= EXP_SUCESIVASGRAF COMA valores_grafica 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = val1.toString()+"="+val2.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_SUCESIVASGRAF",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP_SUCESIVASGRAF ::= valores_grafica 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT =val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_SUCESIVASGRAF",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP_SUCESIVAS ::= EXP_SUCESIVAS COMA valores_print 
            {
              LinkedList<Expresions> RESULT =null;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Expresions> exp_s = (LinkedList<Expresions>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresions val = (Expresions)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp_s; RESULT.add(val); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_SUCESIVAS",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP_SUCESIVAS ::= valores_print 
            {
              LinkedList<Expresions> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresions val = (Expresions)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(val); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_SUCESIVAS",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // valores_grafica ::= NUMERO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT =num;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_grafica",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // valores_grafica ::= CADENA 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = cad;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_grafica",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // valores_print ::= NUMERO 
            {
              Expresions RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Valores(num,Valores.Datatype.DECIMAL,numright,numleft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_print",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // valores_print ::= CADENA 
            {
              Expresions RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Valores(cad,Valores.Datatype.CADENA,cadright,cadleft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_print",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // valores_print ::= OP_ARITMETICA 
            {
              Expresions RESULT =null;
		int opearileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int opeariright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object opeari = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Valores(opeari.toString(),Valores.Datatype.DECIMAL,opeariright,opearileft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_print",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // valores_print ::= OP_ESTADISTICA 
            {
              Expresions RESULT =null;
		int opeEstleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int opeEstright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object opeEst = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Valores(opeEst.toString(),Valores.Datatype.DECIMAL,opeEstright,opeEstleft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_print",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // valores_variable ::= NUMERO 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String numero = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = numero; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_variable",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // valores_variable ::= CADENA 
            {
              Object RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = cadena; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_variable",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // valores_variable ::= OP_ARITMETICA 
            {
              Object RESULT =null;
		int operArileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int operAriright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object operAri = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= operAri;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_variable",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // valores_variable ::= OP_ESTADISTICA 
            {
              Object RESULT =null;
		int operEstleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int operEstright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object operEst = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= operEst;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_variable",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
