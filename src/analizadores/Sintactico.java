
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import expressions.Valores;
import sentence.print;
import sentence.erro;
import sentence.func;
import sentence.declaracionArray;
import sentence.declaracion;
import abstracto.Expresions;
import abstracto.sentencia;
import abstracto.Types;
import abstracto.Types.Type;
import java.util.ArrayList;
import dataforge.Errores;
import dataforge.Simbolos;
import analizadores.funcionesUsar;
import java.util.HashMap;
import java.util.Map;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\203\000\002\002\004\000\002\002\005\000\002\024" +
    "\004\000\002\024\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\005\000\002\004\014\000\002\017\016\000\002\014" +
    "\012\000\002\016\016\000\002\016\014\000\002\012\003" +
    "\000\002\012\003\000\002\020\006\000\002\020\006\000" +
    "\002\020\006\000\002\020\006\000\002\020\006\000\002" +
    "\021\010\000\002\021\010\000\002\021\010\000\002\021" +
    "\010\000\002\021\010\000\002\021\010\000\002\021\006" +
    "\000\002\021\006\000\002\021\006\000\002\021\006\000" +
    "\002\021\006\000\002\021\006\000\002\006\005\000\002" +
    "\006\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\010\005\000\002\010\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\032\010\000\002\033\004\000\002" +
    "\033\003\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\035\010\000\002\040\012\000\002\040\010\000" +
    "\002\041\012\000\002\041\010\000\002\036\010\000\002" +
    "\037\010\000\002\042\004\000\002\043\010\000\002\044" +
    "\004\000\002\044\003\000\002\045\005\000\002\045\005" +
    "\000\002\045\005\000\002\045\005\000\002\046\010\000" +
    "\002\050\012\000\002\050\010\000\002\051\012\000\002" +
    "\051\010\000\002\047\004\000\002\052\010\000\002\053" +
    "\004\000\002\053\003\000\002\054\005\000\002\054\005" +
    "\000\002\054\005\000\002\054\005\000\002\054\005\000" +
    "\002\054\005\000\002\055\010\000\002\060\012\000\002" +
    "\060\010\000\002\061\012\000\002\061\010\000\002\056" +
    "\010\000\002\057\010\000\002\062\004\000\002\063\010" +
    "\000\002\064\004\000\002\064\003\000\002\065\005\000" +
    "\002\065\005\000\002\065\005\000\002\066\010\000\002" +
    "\067\012\000\002\067\010\000\002\070\004\000\002\005" +
    "\003\000\002\005\003\000\002\026\005\000\002\026\003" +
    "\000\002\025\005\000\002\025\003\000\002\027\005\000" +
    "\002\027\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\030\003\000\002\031\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u017d\000\004\045\005\001\002\000\004\002\u017f\001" +
    "\002\000\022\003\022\017\017\040\027\043\012\047\016" +
    "\050\007\051\011\052\025\001\002\000\024\003\ufff8\017" +
    "\ufff8\040\ufff8\043\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8" +
    "\052\ufff8\001\002\000\004\023\u0152\001\002\000\024\003" +
    "\ufffe\017\ufffe\040\ufffe\043\ufffe\046\ufffe\047\ufffe\050\ufffe" +
    "\051\ufffe\052\ufffe\001\002\000\004\023\u0113\001\002\000" +
    "\004\013\u0105\001\002\000\024\003\ufffc\017\ufffc\040\ufffc" +
    "\043\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc\001" +
    "\002\000\024\003\ufffb\017\ufffb\040\ufffb\043\ufffb\046\ufffb" +
    "\047\ufffb\050\ufffb\051\ufffb\052\ufffb\001\002\000\024\003" +
    "\022\017\017\040\027\043\012\046\u0104\047\016\050\007" +
    "\051\011\052\025\001\002\000\004\023\304\001\002\000" +
    "\004\013\246\001\002\000\024\003\ufff7\017\ufff7\040\ufff7" +
    "\043\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\001" +
    "\002\000\024\003\ufff6\017\ufff6\040\ufff6\043\ufff6\046\ufff6" +
    "\047\ufff6\050\ufff6\051\ufff6\052\ufff6\001\002\000\004\044" +
    "\244\001\002\000\024\003\ufff9\017\ufff9\040\ufff9\043\ufff9" +
    "\046\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\001\002\000" +
    "\024\003\ufffa\017\ufffa\040\ufffa\043\ufffa\046\ufffa\047\ufffa" +
    "\050\ufffa\051\ufffa\052\ufffa\001\002\000\004\023\174\001" +
    "\002\000\024\003\ufffd\017\ufffd\040\ufffd\043\ufffd\046\ufffd" +
    "\047\ufffd\050\ufffd\051\ufffd\052\ufffd\001\002\000\004\013" +
    "\030\001\002\000\006\041\031\042\032\001\002\000\004" +
    "\013\uff96\001\002\000\004\013\uff97\001\002\000\004\013" +
    "\034\001\002\000\004\013\035\001\002\000\004\015\036" +
    "\001\002\000\004\011\037\001\002\000\036\004\055\005" +
    "\041\015\046\025\040\026\061\027\057\030\060\031\052" +
    "\032\045\033\043\034\053\035\044\036\056\037\054\001" +
    "\002\000\004\023\171\001\002\000\010\006\uff82\010\uff82" +
    "\044\uff82\001\002\000\004\044\167\001\002\000\004\023" +
    "\160\001\002\000\004\023\151\001\002\000\004\023\142" +
    "\001\002\000\014\006\uff85\010\uff85\012\uff85\024\uff85\044" +
    "\uff85\001\002\000\010\006\uff7f\010\uff7f\044\uff7f\001\002" +
    "\000\010\006\uff81\010\uff81\044\uff81\001\002\000\010\006" +
    "\uff80\010\uff80\044\uff80\001\002\000\004\023\137\001\002" +
    "\000\004\023\130\001\002\000\004\023\121\001\002\000" +
    "\010\006\uff83\010\uff83\044\uff83\001\002\000\004\023\102" +
    "\001\002\000\004\023\077\001\002\000\004\023\074\001" +
    "\002\000\004\023\062\001\002\000\034\004\067\015\046" +
    "\025\040\026\061\027\057\030\060\031\052\032\045\033" +
    "\043\034\053\035\044\036\056\037\054\001\002\000\006" +
    "\006\071\024\072\001\002\000\006\006\uffd7\024\uffd7\001" +
    "\002\000\006\006\uffda\024\uffda\001\002\000\006\006\uffd9" +
    "\024\uffd9\001\002\000\006\006\uffd8\024\uffd8\001\002\000" +
    "\006\006\uffdb\024\uffdb\001\002\000\034\004\067\015\046" +
    "\025\040\026\061\027\057\030\060\031\052\032\045\033" +
    "\043\034\053\035\044\036\056\037\054\001\002\000\012" +
    "\006\uffec\010\uffec\024\uffec\044\uffec\001\002\000\006\006" +
    "\uffdc\024\uffdc\001\002\000\034\004\067\015\046\025\040" +
    "\026\061\027\057\030\060\031\052\032\045\033\043\034" +
    "\053\035\044\036\056\037\054\001\002\000\006\006\071" +
    "\024\076\001\002\000\012\006\uffea\010\uffea\024\uffea\044" +
    "\uffea\001\002\000\034\004\067\015\046\025\040\026\061" +
    "\027\057\030\060\031\052\032\045\033\043\034\053\035" +
    "\044\036\056\037\054\001\002\000\006\006\071\024\101" +
    "\001\002\000\012\006\uffeb\010\uffeb\024\uffeb\044\uffeb\001" +
    "\002\000\036\004\106\007\110\016\105\025\040\026\061" +
    "\027\057\030\060\031\052\032\045\033\043\034\053\035" +
    "\044\036\056\037\054\001\002\000\010\006\uffd3\010\uffd3" +
    "\024\uffd3\001\002\000\010\006\uffd4\010\uffd4\024\uffd4\001" +
    "\002\000\012\006\uff84\010\uff84\024\uff84\044\uff84\001\002" +
    "\000\010\006\uffd2\010\uffd2\024\uffd2\001\002\000\010\006" +
    "\uffd1\010\uffd1\024\uffd1\001\002\000\034\004\106\016\105" +
    "\025\040\026\061\027\057\030\060\031\052\032\045\033" +
    "\043\034\053\035\044\036\056\037\054\001\002\000\010" +
    "\006\uffd5\010\uffd5\024\uffd5\001\002\000\006\006\113\024" +
    "\114\001\002\000\034\004\106\016\105\025\040\026\061" +
    "\027\057\030\060\031\052\032\045\033\043\034\053\035" +
    "\044\036\056\037\054\001\002\000\012\006\uffde\010\uffde" +
    "\024\uffde\044\uffde\001\002\000\010\006\uffd6\010\uffd6\024" +
    "\uffd6\001\002\000\006\006\113\010\117\001\002\000\004" +
    "\024\120\001\002\000\012\006\uffe4\010\uffe4\024\uffe4\044" +
    "\uffe4\001\002\000\036\004\106\007\122\016\105\025\040" +
    "\026\061\027\057\030\060\031\052\032\045\033\043\034" +
    "\053\035\044\036\056\037\054\001\002\000\034\004\106" +
    "\016\105\025\040\026\061\027\057\030\060\031\052\032" +
    "\045\033\043\034\053\035\044\036\056\037\054\001\002" +
    "\000\006\006\113\024\124\001\002\000\012\006\uffdd\010" +
    "\uffdd\024\uffdd\044\uffdd\001\002\000\006\006\113\010\126" +
    "\001\002\000\004\024\127\001\002\000\012\006\uffe3\010" +
    "\uffe3\024\uffe3\044\uffe3\001\002\000\036\004\106\007\131" +
    "\016\105\025\040\026\061\027\057\030\060\031\052\032" +
    "\045\033\043\034\053\035\044\036\056\037\054\001\002" +
    "\000\034\004\106\016\105\025\040\026\061\027\057\030" +
    "\060\031\052\032\045\033\043\034\053\035\044\036\056" +
    "\037\054\001\002\000\006\006\113\024\133\001\002\000" +
    "\012\006\uffe0\010\uffe0\024\uffe0\044\uffe0\001\002\000\006" +
    "\006\113\010\135\001\002\000\004\024\136\001\002\000" +
    "\012\006\uffe6\010\uffe6\024\uffe6\044\uffe6\001\002\000\034" +
    "\004\067\015\046\025\040\026\061\027\057\030\060\031" +
    "\052\032\045\033\043\034\053\035\044\036\056\037\054" +
    "\001\002\000\006\006\071\024\141\001\002\000\012\006" +
    "\uffe9\010\uffe9\024\uffe9\044\uffe9\001\002\000\036\004\106" +
    "\007\143\016\105\025\040\026\061\027\057\030\060\031" +
    "\052\032\045\033\043\034\053\035\044\036\056\037\054" +
    "\001\002\000\034\004\106\016\105\025\040\026\061\027" +
    "\057\030\060\031\052\032\045\033\043\034\053\035\044" +
    "\036\056\037\054\001\002\000\006\006\113\024\145\001" +
    "\002\000\012\006\uffe2\010\uffe2\024\uffe2\044\uffe2\001\002" +
    "\000\006\006\113\010\147\001\002\000\004\024\150\001" +
    "\002\000\012\006\uffe8\010\uffe8\024\uffe8\044\uffe8\001\002" +
    "\000\036\004\106\007\152\016\105\025\040\026\061\027" +
    "\057\030\060\031\052\032\045\033\043\034\053\035\044" +
    "\036\056\037\054\001\002\000\034\004\106\016\105\025" +
    "\040\026\061\027\057\030\060\031\052\032\045\033\043" +
    "\034\053\035\044\036\056\037\054\001\002\000\006\006" +
    "\113\024\154\001\002\000\012\006\uffdf\010\uffdf\024\uffdf" +
    "\044\uffdf\001\002\000\006\006\113\010\156\001\002\000" +
    "\004\024\157\001\002\000\012\006\uffe5\010\uffe5\024\uffe5" +
    "\044\uffe5\001\002\000\036\004\106\007\161\016\105\025" +
    "\040\026\061\027\057\030\060\031\052\032\045\033\043" +
    "\034\053\035\044\036\056\037\054\001\002\000\034\004" +
    "\106\016\105\025\040\026\061\027\057\030\060\031\052" +
    "\032\045\033\043\034\053\035\044\036\056\037\054\001" +
    "\002\000\006\006\113\024\163\001\002\000\012\006\uffe1" +
    "\010\uffe1\024\uffe1\044\uffe1\001\002\000\006\006\113\010" +
    "\165\001\002\000\004\024\166\001\002\000\012\006\uffe7" +
    "\010\uffe7\024\uffe7\044\uffe7\001\002\000\004\014\170\001" +
    "\002\000\024\003\ufff4\017\ufff4\040\ufff4\043\ufff4\046\ufff4" +
    "\047\ufff4\050\ufff4\051\ufff4\052\ufff4\001\002\000\034\004" +
    "\067\015\046\025\040\026\061\027\057\030\060\031\052" +
    "\032\045\033\043\034\053\035\044\036\056\037\054\001" +
    "\002\000\006\006\071\024\173\001\002\000\012\006\uffed" +
    "\010\uffed\024\uffed\044\uffed\001\002\000\010\053\201\060" +
    "\202\062\176\001\002\000\012\024\241\053\201\060\202" +
    "\062\176\001\002\000\004\052\237\001\002\000\012\024" +
    "\uff9f\053\uff9f\060\uff9f\062\uff9f\001\002\000\004\044\235" +
    "\001\002\000\004\013\230\001\002\000\004\013\211\001" +
    "\002\000\004\044\207\001\002\000\004\044\205\001\002" +
    "\000\004\014\206\001\002\000\012\024\uff9e\053\uff9e\060" +
    "\uff9e\062\uff9e\001\002\000\004\014\210\001\002\000\012" +
    "\024\uff9d\053\uff9d\060\uff9d\062\uff9d\001\002\000\004\013" +
    "\212\001\002\000\004\042\213\001\002\000\004\022\214" +
    "\001\002\000\014\004\221\005\215\007\222\015\046\016" +
    "\105\001\002\000\010\006\uff8e\010\uff8e\044\uff8e\001\002" +
    "\000\010\006\uff8d\010\uff8d\044\uff8d\001\002\000\010\006" +
    "\uff94\010\uff94\044\uff94\001\002\000\010\006\uff8c\010\uff8c" +
    "\044\uff8c\001\002\000\010\006\uff8f\010\uff8f\044\uff8f\001" +
    "\002\000\012\004\221\005\215\015\046\016\105\001\002" +
    "\000\006\006\224\044\uff99\001\002\000\012\004\221\005" +
    "\215\015\046\016\105\001\002\000\010\006\uff95\010\uff95" +
    "\044\uff95\001\002\000\006\006\224\010\227\001\002\000" +
    "\004\044\uff9a\001\002\000\004\013\231\001\002\000\004" +
    "\042\232\001\002\000\004\022\233\001\002\000\012\004" +
    "\221\005\215\015\046\016\105\001\002\000\004\044\uff9b" +
    "\001\002\000\004\014\236\001\002\000\012\024\uff9c\053" +
    "\uff9c\060\uff9c\062\uff9c\001\002\000\004\044\uff98\001\002" +
    "\000\012\024\uffa0\053\uffa0\060\uffa0\062\uffa0\001\002\000" +
    "\004\044\242\001\002\000\004\014\243\001\002\000\024" +
    "\003\uffa1\017\uffa1\040\uffa1\043\uffa1\046\uffa1\047\uffa1\050" +
    "\uffa1\051\uffa1\052\uffa1\001\002\000\004\014\245\001\002" +
    "\000\024\003\ufff5\017\ufff5\040\ufff5\043\ufff5\046\ufff5\047" +
    "\ufff5\050\ufff5\051\ufff5\052\ufff5\001\002\000\004\013\247" +
    "\001\002\000\006\020\250\021\251\001\002\000\004\022" +
    "\267\001\002\000\004\022\252\001\002\000\040\004\257" +
    "\005\253\015\046\016\105\025\040\026\061\027\057\030" +
    "\060\031\052\032\045\033\043\034\053\035\044\036\056" +
    "\037\054\001\002\000\010\006\uff8a\010\uff8a\044\uff8a\001" +
    "\002\000\010\006\uff87\010\uff87\044\uff87\001\002\000\010" +
    "\006\uff89\010\uff89\044\uff89\001\002\000\010\006\uff88\010" +
    "\uff88\044\uff88\001\002\000\010\006\uff8b\010\uff8b\044\uff8b" +
    "\001\002\000\010\006\uff86\010\uff86\044\uff86\001\002\000" +
    "\006\006\263\044\264\001\002\000\010\006\uff92\010\uff92" +
    "\044\uff92\001\002\000\040\004\257\005\253\015\046\016" +
    "\105\025\040\026\061\027\057\030\060\031\052\032\045" +
    "\033\043\034\053\035\044\036\056\037\054\001\002\000" +
    "\004\014\265\001\002\000\024\003\ufff2\017\ufff2\040\ufff2" +
    "\043\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\001" +
    "\002\000\010\006\uff93\010\uff93\044\uff93\001\002\000\006" +
    "\005\272\015\046\001\002\000\004\012\uffee\001\002\000" +
    "\004\012\273\001\002\000\004\012\uffef\001\002\000\042" +
    "\004\257\005\253\007\274\015\046\016\105\025\040\026" +
    "\061\027\057\030\060\031\052\032\045\033\043\034\053" +
    "\035\044\036\056\037\054\001\002\000\040\004\257\005" +
    "\253\015\046\016\105\025\040\026\061\027\057\030\060" +
    "\031\052\032\045\033\043\034\053\035\044\036\056\037" +
    "\054\001\002\000\006\006\263\044\276\001\002\000\004" +
    "\014\277\001\002\000\024\003\ufff0\017\ufff0\040\ufff0\043" +
    "\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\001\002" +
    "\000\006\006\263\010\301\001\002\000\004\044\302\001" +
    "\002\000\004\014\303\001\002\000\024\003\ufff1\017\ufff1" +
    "\040\ufff1\043\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1\052" +
    "\ufff1\001\002\000\016\053\313\054\317\055\315\056\314" +
    "\057\311\062\316\001\002\000\020\024\u0100\053\313\054" +
    "\317\055\315\056\314\057\311\062\316\001\002\000\004" +
    "\044\375\001\002\000\004\044\373\001\002\000\004\044" +
    "\371\001\002\000\004\013\364\001\002\000\020\024\uffce" +
    "\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce\062\uffce\001" +
    "\002\000\004\013\357\001\002\000\004\013\352\001\002" +
    "\000\004\013\342\001\002\000\004\047\341\001\002\000" +
    "\004\013\331\001\002\000\004\044\327\001\002\000\004" +
    "\044\325\001\002\000\004\044\323\001\002\000\004\014" +
    "\324\001\002\000\020\024\uffcd\053\uffcd\054\uffcd\055\uffcd" +
    "\056\uffcd\057\uffcd\062\uffcd\001\002\000\004\014\326\001" +
    "\002\000\020\024\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc" +
    "\057\uffcc\062\uffcc\001\002\000\004\014\330\001\002\000" +
    "\020\024\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb" +
    "\062\uffcb\001\002\000\004\013\332\001\002\000\004\042" +
    "\333\001\002\000\004\022\334\001\002\000\014\004\221" +
    "\005\215\007\335\015\046\016\105\001\002\000\012\004" +
    "\221\005\215\015\046\016\105\001\002\000\006\006\224" +
    "\044\uffc5\001\002\000\006\006\224\010\340\001\002\000" +
    "\004\044\uffc6\001\002\000\004\044\uffc0\001\002\000\004" +
    "\013\343\001\002\000\004\041\344\001\002\000\004\022" +
    "\345\001\002\000\014\004\221\005\215\007\346\015\046" +
    "\016\105\001\002\000\012\004\221\005\215\015\046\016" +
    "\105\001\002\000\006\006\224\044\uffc3\001\002\000\006" +
    "\006\224\010\351\001\002\000\004\044\uffc4\001\002\000" +
    "\004\013\353\001\002\000\004\042\354\001\002\000\004" +
    "\022\355\001\002\000\012\004\221\005\215\015\046\016" +
    "\105\001\002\000\004\044\uffc2\001\002\000\004\013\360" +
    "\001\002\000\004\042\361\001\002\000\004\022\362\001" +
    "\002\000\004\005\363\001\002\000\004\044\uffc7\001\002" +
    "\000\004\013\365\001\002\000\004\042\366\001\002\000" +
    "\004\022\367\001\002\000\012\004\221\005\215\015\046" +
    "\016\105\001\002\000\004\044\uffc1\001\002\000\004\014" +
    "\372\001\002\000\020\024\uffca\053\uffca\054\uffca\055\uffca" +
    "\056\uffca\057\uffca\062\uffca\001\002\000\004\014\374\001" +
    "\002\000\020\024\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9" +
    "\057\uffc9\062\uffc9\001\002\000\004\014\376\001\002\000" +
    "\020\024\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8" +
    "\062\uffc8\001\002\000\020\024\uffcf\053\uffcf\054\uffcf\055" +
    "\uffcf\056\uffcf\057\uffcf\062\uffcf\001\002\000\004\044\u0101" +
    "\001\002\000\004\014\u0102\001\002\000\024\003\uffd0\017" +
    "\uffd0\040\uffd0\043\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0" +
    "\052\uffd0\001\002\000\024\003\uffff\017\uffff\040\uffff\043" +
    "\uffff\046\uffff\047\uffff\050\uffff\051\uffff\052\uffff\001\002" +
    "\000\004\002\000\001\002\000\006\041\031\042\032\001" +
    "\002\000\004\013\u0107\001\002\000\004\013\u0108\001\002" +
    "\000\004\016\u0109\001\002\000\004\011\u010a\001\002\000" +
    "\004\007\u010b\001\002\000\036\004\055\005\041\015\046" +
    "\025\040\026\061\027\057\030\060\031\052\032\045\033" +
    "\043\034\053\035\044\036\056\037\054\001\002\000\006" +
    "\006\uff90\010\uff90\001\002\000\006\006\u010e\010\u010f\001" +
    "\002\000\036\004\055\005\041\015\046\025\040\026\061" +
    "\027\057\030\060\031\052\032\045\033\043\034\053\035" +
    "\044\036\056\037\054\001\002\000\004\044\u0110\001\002" +
    "\000\004\014\u0111\001\002\000\024\003\ufff3\017\ufff3\040" +
    "\ufff3\043\ufff3\046\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3" +
    "\001\002\000\006\006\uff91\010\uff91\001\002\000\016\053" +
    "\u0117\054\u011a\055\u0119\056\u0116\057\u0115\062\u0118\001\002" +
    "\000\004\044\u0150\001\002\000\004\013\u014b\001\002\000" +
    "\004\013\u0146\001\002\000\004\013\u0141\001\002\000\004" +
    "\051\u0140\001\002\000\004\013\u0138\001\002\000\004\013" +
    "\u0130\001\002\000\004\044\u012e\001\002\000\020\024\u012a" +
    "\053\u0117\054\u011a\055\u0119\056\u0116\057\u0115\062\u0118\001" +
    "\002\000\004\044\u0128\001\002\000\004\044\u0126\001\002" +
    "\000\004\044\u0124\001\002\000\004\044\u0122\001\002\000" +
    "\020\024\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0" +
    "\062\uffb0\001\002\000\004\014\u0123\001\002\000\020\024" +
    "\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057\uffad\062\uffad" +
    "\001\002\000\004\014\u0125\001\002\000\020\024\uffab\053" +
    "\uffab\054\uffab\055\uffab\056\uffab\057\uffab\062\uffab\001\002" +
    "\000\004\014\u0127\001\002\000\020\024\uffae\053\uffae\054" +
    "\uffae\055\uffae\056\uffae\057\uffae\062\uffae\001\002\000\004" +
    "\014\u0129\001\002\000\020\024\uffaa\053\uffaa\054\uffaa\055" +
    "\uffaa\056\uffaa\057\uffaa\062\uffaa\001\002\000\004\044\u012c" +
    "\001\002\000\020\024\uffb1\053\uffb1\054\uffb1\055\uffb1\056" +
    "\uffb1\057\uffb1\062\uffb1\001\002\000\004\014\u012d\001\002" +
    "\000\024\003\uffb2\017\uffb2\040\uffb2\043\uffb2\046\uffb2\047" +
    "\uffb2\050\uffb2\051\uffb2\052\uffb2\001\002\000\004\014\u012f" +
    "\001\002\000\020\024\uffac\053\uffac\054\uffac\055\uffac\056" +
    "\uffac\057\uffac\062\uffac\001\002\000\004\013\u0131\001\002" +
    "\000\004\042\u0132\001\002\000\004\022\u0133\001\002\000" +
    "\014\004\221\005\215\007\u0134\015\046\016\105\001\002" +
    "\000\012\004\221\005\215\015\046\016\105\001\002\000" +
    "\006\006\224\044\uffa7\001\002\000\006\006\224\010\u0137" +
    "\001\002\000\004\044\uffa8\001\002\000\004\013\u0139\001" +
    "\002\000\004\041\u013a\001\002\000\004\022\u013b\001\002" +
    "\000\014\004\221\005\215\007\u013c\015\046\016\105\001" +
    "\002\000\012\004\221\005\215\015\046\016\105\001\002" +
    "\000\006\006\224\044\uffa5\001\002\000\006\006\224\010" +
    "\u013f\001\002\000\004\044\uffa6\001\002\000\004\044\uffa2" +
    "\001\002\000\004\013\u0142\001\002\000\004\042\u0143\001" +
    "\002\000\004\022\u0144\001\002\000\004\005\u0145\001\002" +
    "\000\004\044\uffa9\001\002\000\004\013\u0147\001\002\000" +
    "\004\042\u0148\001\002\000\004\022\u0149\001\002\000\012" +
    "\004\221\005\215\015\046\016\105\001\002\000\004\044" +
    "\uffa4\001\002\000\004\013\u014c\001\002\000\004\042\u014d" +
    "\001\002\000\004\022\u014e\001\002\000\012\004\221\005" +
    "\215\015\046\016\105\001\002\000\004\044\uffa3\001\002" +
    "\000\004\014\u0151\001\002\000\020\024\uffaf\053\uffaf\054" +
    "\uffaf\055\uffaf\056\uffaf\057\uffaf\062\uffaf\001\002\000\012" +
    "\053\u0154\060\u0159\061\u0156\062\u0155\001\002\000\004\044" +
    "\u017d\001\002\000\004\013\u0178\001\002\000\004\050\u0177" +
    "\001\002\000\004\013\u016f\001\002\000\004\044\u016d\001" +
    "\002\000\004\044\u016b\001\002\000\004\013\u0163\001\002" +
    "\000\004\044\u0161\001\002\000\014\024\u015d\053\u0154\060" +
    "\u0159\061\u0156\062\u0155\001\002\000\014\024\uffbd\053\uffbd" +
    "\060\uffbd\061\uffbd\062\uffbd\001\002\000\004\044\u015f\001" +
    "\002\000\014\024\uffbe\053\uffbe\060\uffbe\061\uffbe\062\uffbe" +
    "\001\002\000\004\014\u0160\001\002\000\024\003\uffbf\017" +
    "\uffbf\040\uffbf\043\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf" +
    "\052\uffbf\001\002\000\004\014\u0162\001\002\000\014\024" +
    "\uffb9\053\uffb9\060\uffb9\061\uffb9\062\uffb9\001\002\000\004" +
    "\013\u0164\001\002\000\004\041\u0165\001\002\000\004\022" +
    "\u0166\001\002\000\014\004\221\005\215\007\u0167\015\046" +
    "\016\105\001\002\000\012\004\221\005\215\015\046\016" +
    "\105\001\002\000\006\006\224\044\uffb4\001\002\000\006" +
    "\006\224\010\u016a\001\002\000\004\044\uffb5\001\002\000" +
    "\004\014\u016c\001\002\000\014\024\uffbb\053\uffbb\060\uffbb" +
    "\061\uffbb\062\uffbb\001\002\000\004\014\u016e\001\002\000" +
    "\014\024\uffbc\053\uffbc\060\uffbc\061\uffbc\062\uffbc\001\002" +
    "\000\004\013\u0170\001\002\000\004\042\u0171\001\002\000" +
    "\004\022\u0172\001\002\000\014\004\221\005\215\007\u0173" +
    "\015\046\016\105\001\002\000\012\004\221\005\215\015" +
    "\046\016\105\001\002\000\006\006\224\044\uffb6\001\002" +
    "\000\006\006\224\010\u0176\001\002\000\004\044\uffb7\001" +
    "\002\000\004\044\uffb3\001\002\000\004\013\u0179\001\002" +
    "\000\004\042\u017a\001\002\000\004\022\u017b\001\002\000" +
    "\012\004\221\005\215\015\046\016\105\001\002\000\004" +
    "\044\uffb8\001\002\000\004\014\u017e\001\002\000\014\024" +
    "\uffba\053\uffba\060\uffba\061\uffba\062\uffba\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u017d\000\004\002\003\001\001\000\002\001\001\000" +
    "\026\003\007\004\013\014\025\016\012\017\023\024\014" +
    "\032\022\043\005\052\017\063\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\003\u0102\004\013\014\025\016\012\017\023\032\022" +
    "\043\005\052\017\063\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\015\041\020\047\021\050\030\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\006\062\007\067\020" +
    "\064\021\065\030\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\072\020\064\021\065" +
    "\030\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\006\074\007\067\020\064\021\065\030\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\006\077\007" +
    "\067\020\064\021\065\030\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\010\111\011\110\020\102\021" +
    "\103\031\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\010\115\011\110\020\102\021\103\031\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\011\114\020" +
    "\102\021\103\031\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\010\122\011\110\020\102\021\103\031\106" +
    "\001\001\000\014\010\124\011\110\020\102\021\103\031" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\010" +
    "\131\011\110\020\102\021\103\031\106\001\001\000\014" +
    "\010\133\011\110\020\102\021\103\031\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\006\137\007\067\020" +
    "\064\021\065\030\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\010\143\011\110\020\102\021\103\031" +
    "\106\001\001\000\014\010\145\011\110\020\102\021\103" +
    "\031\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\010\152\011\110\020\102\021\103\031\106\001\001\000" +
    "\014\010\154\011\110\020\102\021\103\031\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\010\161\011\110" +
    "\020\102\021\103\031\106\001\001\000\014\010\163\011" +
    "\110\020\102\021\103\031\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\171\007\067\020\064\021\065\030\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\064\174\065\176" +
    "\066\203\067\202\070\177\001\001\000\012\065\237\066" +
    "\203\067\202\070\177\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\023\216\026\222\030\215\031\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\023\216\026\225\030\215\031" +
    "\217\001\001\000\002\001\001\000\010\023\224\030\215" +
    "\031\217\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\023\233\030\215\031\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\013\261\020\254\021\255\025\260" +
    "\030\253\031\257\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\013\265\020\254\021\255\030\253\031\257\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\270\030\267\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\013\261\020\254\021" +
    "\255\025\274\030\253\031\257\001\001\000\016\013\261" +
    "\020\254\021\255\025\277\030\253\031\257\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\033\304\034\311\035\321\036\307\037\306" +
    "\040\320\041\317\042\305\001\001\000\020\034\376\035" +
    "\321\036\307\037\306\040\320\041\317\042\305\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\023" +
    "\216\026\335\030\215\031\217\001\001\000\012\023\216" +
    "\026\336\030\215\031\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\023" +
    "\216\026\346\030\215\031\217\001\001\000\012\023\216" +
    "\026\347\030\215\031\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\023\355\030\215\031" +
    "\217\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\023\367\030\215\031\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\u0105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\015" +
    "\u010b\020\047\021\050\027\u010c\030\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\015\u0111\020\047\021" +
    "\050\030\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\053\u011b\054" +
    "\u0120\055\u0113\056\u011a\057\u011e\060\u011d\061\u011f\062\u011c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\054\u012a\055" +
    "\u0113\056\u011a\057\u011e\060\u011d\061\u011f\062\u011c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\023" +
    "\216\026\u0134\030\215\031\217\001\001\000\012\023\216" +
    "\026\u0135\030\215\031\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\023\216\026\u013c\030" +
    "\215\031\217\001\001\000\012\023\216\026\u013d\030\215" +
    "\031\217\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\023\u0149\030\215\031\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\023\u014e\030\215\031\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\044\u015a" +
    "\045\u015b\046\u0156\047\u0159\050\u0157\051\u0152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\045\u015d\046\u0156\047\u0159" +
    "\050\u0157\051\u0152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\023\216\026\u0167" +
    "\030\215\031\217\001\001\000\012\023\216\026\u0168\030" +
    "\215\031\217\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\023\216\026\u0173\030" +
    "\215\031\217\001\001\000\012\023\216\026\u0174\030\215" +
    "\031\217\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\023\u017b\030\215\031" +
    "\217\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    public ArrayList<Errores> errSint = new ArrayList<Errores>();
    
    public ArrayList<Simbolos> decSimbol = new ArrayList<Simbolos>();
    public HashMap<String,String> graficasBarras = new HashMap<String,String>();
    public HashMap<String,String> graficasPie = new HashMap<String,String>();
    public HashMap<String,String> graficaLineal = new HashMap<String,String>();
    public HashMap<String,String> graficaHisto = new HashMap<String,String>();
    public HashMap<String,String> variablesNorm = new HashMap<String,String>();
    public Map<String, String> variablesArr = new HashMap<>();
    public LinkedList<String> list_sucesiva = new LinkedList<>();
    

    public LinkedList<sentencia>AST;
    

    public LinkedList<sentencia>getAST(){
    
        return AST;

    }


    public String findvariable(String id) {
        String var_valor = "";

        if (variablesNorm.containsKey(id)) {
            var_valor= variablesNorm.get(id);
            
        } else {
            System.out.println("No se encontro la variable");
            var_valor="0.0";
        }

        return var_valor;
    }

    public String findvariablearr(String id) {
        String var_valor = "";

        if (variablesArr.containsKey(id)) {
            var_valor= variablesArr.get(id);
            
        } else {
            System.out.println("No se encontro la variable");
            return var_valor="0.0";
        }

        return var_valor;
    }
    
    public void save_simbol(String id, String tipo ,String val,int fila,int columna){
            
            Simbolos tmp =new Simbolos(id,tipo,val,fila,columna);
            decSimbol.add(tmp);
    }


    

    
    
   
    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
            Errores tmp = new Errores("Sintactico",s.right,s.left, s.value+"Error de sintaxis");
            errSint.add(tmp);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
            Errores tmp = new Errores("Sintactico",s.right,s.left, s.value+"Error de sintaxis sin recuperacion");
            errSint.add(tmp);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {

  
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= PROGRAM INSTRUCCIONES ENDPROGRAM 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<sentencia> b = (LinkedList<sentencia>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 parser.AST=b; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<sentencia> a = (LinkedList<sentencia>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		sentencia b = (sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT= a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		sentencia a = (sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= IMPRIMIR_EXP 
            {
              sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		print a = (print)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT =a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= IMPRIMIR_ARRAY 
            {
              sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		print a = (print)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= DECLARACION 
            {
              sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new func("declarada variable"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= Dec_Arreglo 
            {
              sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new func("declarada arreglo");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= GRAFBARRAS 
            {
              sentencia RESULT =null;
		RESULT= new func("nuevagraficabarras");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= GRAFPIE 
            {
              sentencia RESULT =null;
		RESULT= new func("NUEVA GRAFICA PIE");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= GRAFLINEAL 
            {
              sentencia RESULT =null;
		RESULT= new func("NUEVA GRAFICA lineal");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= GRAFHISTO 
            {
              sentencia RESULT =null;
		RESULT= new func("NUEVA GRAFICA HISTOGRAMA");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= error END PUNTOYCOMA 
            {
              sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT= new erro("error sint"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION ::= VAR DOSPUNTOS TIPO DOSPUNTOS DOSPUNTOS ID ASSIGN valores_variable END PUNTOYCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id_var = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int exp_valeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int exp_varight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object exp_va = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = variablesNorm.put(id_var,exp_va.toString()); save_simbol(id_var,"variable"+" "+tipo.toString(),exp_va.toString(),exp_varight,exp_valeft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Dec_Arreglo ::= ARR DOSPUNTOS TIPO DOSPUNTOS DOSPUNTOS ID_ARRAY ASSIGN COR_IZQ EXP_SUCESIVASARR COR_DER END PUNTOYCOMA 
            {
              Object RESULT =null;
		int tipo_arrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int tipo_arrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object tipo_arr = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int id_arrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int id_arrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id_arr = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object exp_s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		RESULT = variablesArr.put(id_arr,exp_s.toString()); save_simbol(id_arr,"arreglo"+" "+tipo_arr.toString(),"["+exp_s.toString()+"]",exp_sright,exp_sleft);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Dec_Arreglo",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IMPRIMIR_EXP ::= CONSOLE DOSPUNTOS DOSPUNTOS PRINT IGUAL EXP_SUCESIVAS END PUNTOYCOMA 
            {
              print RESULT =null;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Expresions> exp_s = (LinkedList<Expresions>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new print(exp_s,exp_sright, exp_sleft,"! Salida: "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR_EXP",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IMPRIMIR_ARRAY ::= CONSOLE DOSPUNTOS DOSPUNTOS COLUMN IGUAL EXP_TITULO ASSIGN2 COR_IZQ EXP_SUCESIVAS COR_DER END PUNTOYCOMA 
            {
              print RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Expresions> exp_s = (LinkedList<Expresions>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		 RESULT = new print(exp_s,exp_sright, exp_sleft,"! "+titulo.toString()+": "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR_ARRAY",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IMPRIMIR_ARRAY ::= CONSOLE DOSPUNTOS DOSPUNTOS COLUMN IGUAL EXP_TITULO ASSIGN2 EXP_SUCESIVAS END PUNTOYCOMA 
            {
              print RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Expresions> exp_s = (LinkedList<Expresions>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new print(exp_s,exp_sright, exp_sleft,"! "+titulo.toString()+": "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR_ARRAY",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXP_TITULO ::= CADENA 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= cad; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_TITULO",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXP_TITULO ::= ID_DECLA 
            {
              Object RESULT =null;
		int id_tituloleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id_tituloright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id_titulo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= id_titulo; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_TITULO",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OP_ARITMETICA ::= sum PAR_IZQ OP PAR_DER 
            {
              Object RESULT =null;
		int sumleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String sum = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		double resultado = funcionesUsar.operacionAritmetica(sum, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OP_ARITMETICA ::= res PAR_IZQ OP PAR_DER 
            {
              Object RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String res = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		double resultado = funcionesUsar.operacionAritmetica(res, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OP_ARITMETICA ::= mul PAR_IZQ OP PAR_DER 
            {
              Object RESULT =null;
		int mulleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int mulright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String mul = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		double resultado = funcionesUsar.operacionAritmetica(mul, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OP_ARITMETICA ::= mod PAR_IZQ OP PAR_DER 
            {
              Object RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String mod = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		double resultado = funcionesUsar.operacionAritmetica(mod, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OP_ARITMETICA ::= div PAR_IZQ OP PAR_DER 
            {
              Object RESULT =null;
		int divleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int divright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String div = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		double resultado = funcionesUsar.operacionAritmetica(div, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OP_ESTADISTICA ::= media PAR_IZQ COR_IZQ OP3 COR_DER PAR_DER 
            {
              Object RESULT =null;
		int medialeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int mediaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String media = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		double resultado = funcionesUsar.operacionEstadistica(media, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ESTADISTICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OP_ESTADISTICA ::= mediana PAR_IZQ COR_IZQ OP3 COR_DER PAR_DER 
            {
              Object RESULT =null;
		int medianaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int medianaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String mediana = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		double resultado = funcionesUsar.operacionEstadistica(mediana, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ESTADISTICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OP_ESTADISTICA ::= moda PAR_IZQ COR_IZQ OP3 COR_DER PAR_DER 
            {
              Object RESULT =null;
		int modaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int modaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String moda = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		double resultado = funcionesUsar.operacionEstadistica(moda, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ESTADISTICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OP_ESTADISTICA ::= varianza PAR_IZQ COR_IZQ OP3 COR_DER PAR_DER 
            {
              Object RESULT =null;
		int varianzaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int varianzaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String varianza = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		double resultado = funcionesUsar.operacionEstadistica(varianza, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ESTADISTICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OP_ESTADISTICA ::= max PAR_IZQ COR_IZQ OP3 COR_DER PAR_DER 
            {
              Object RESULT =null;
		int maxleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String max = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		double resultado = funcionesUsar.operacionEstadistica(max, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ESTADISTICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OP_ESTADISTICA ::= min PAR_IZQ COR_IZQ OP3 COR_DER PAR_DER 
            {
              Object RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String min = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		double resultado = funcionesUsar.operacionEstadistica(min, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ESTADISTICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OP_ESTADISTICA ::= media PAR_IZQ OP3 PAR_DER 
            {
              Object RESULT =null;
		int medialeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int mediaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String media = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		double resultado = funcionesUsar.operacionEstadistica(media, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ESTADISTICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OP_ESTADISTICA ::= mediana PAR_IZQ OP3 PAR_DER 
            {
              Object RESULT =null;
		int medianaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int medianaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String mediana = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		double resultado = funcionesUsar.operacionEstadistica(mediana, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ESTADISTICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OP_ESTADISTICA ::= moda PAR_IZQ OP3 PAR_DER 
            {
              Object RESULT =null;
		int modaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int modaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String moda = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		double resultado = funcionesUsar.operacionEstadistica(moda, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ESTADISTICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OP_ESTADISTICA ::= varianza PAR_IZQ OP3 PAR_DER 
            {
              Object RESULT =null;
		int varianzaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int varianzaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String varianza = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		double resultado = funcionesUsar.operacionEstadistica(varianza, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ESTADISTICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OP_ESTADISTICA ::= max PAR_IZQ OP3 PAR_DER 
            {
              Object RESULT =null;
		int maxleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String max = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		double resultado = funcionesUsar.operacionEstadistica(max, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ESTADISTICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OP_ESTADISTICA ::= min PAR_IZQ OP3 PAR_DER 
            {
              Object RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String min = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		double resultado = funcionesUsar.operacionEstadistica(min, val.toString()); RESULT =resultado;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_ESTADISTICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OP ::= OP COMA OP2 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = val1.toString()+"="+val2.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OP ::= OP2 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT =val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OP2 ::= OP_ARITMETICA 
            {
              Object RESULT =null;
		int resuArileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int resuAriright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object resuAri = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= resuAri;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP2",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OP2 ::= OP_ESTADISTICA 
            {
              Object RESULT =null;
		int resuEstleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int resuEstright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object resuEst = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= resuEst; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP2",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OP2 ::= NUMERO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=num; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP2",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OP2 ::= ID_DECLA 
            {
              Object RESULT =null;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=id_var; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP2",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OP3 ::= OP3 COMA OP4 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = val1.toString()+","+val2.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP3",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OP3 ::= OP4 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT =val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP3",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OP4 ::= OP_ESTADISTICA 
            {
              Object RESULT =null;
		int resuEstleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int resuEstright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object resuEst = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= resuEst; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP4",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OP4 ::= OP_ARITMETICA 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT =num; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP4",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OP4 ::= NUMERO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=num; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP4",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OP4 ::= ARR_DECLA 
            {
              Object RESULT =null;
		int id_arrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id_arrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id_arr = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=id_arr;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP4",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // GRAFBARRAS ::= graphbar PAR_IZQ SENTENCIAS_BAR PAR_DER END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GRAFBARRAS",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIAS_BAR ::= SENTENCIAS_BAR BAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_BAR",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIAS_BAR ::= BAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_BAR",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BAR ::= TITULO_BAR END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BAR",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BAR ::= EJEX_BAR END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BAR",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BAR ::= EJEY_BAR END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BAR",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BAR ::= TITULOX_BAR END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BAR",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BAR ::= TITULOY_BAR END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BAR",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BAR ::= EXEC_BAR END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BAR",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TITULO_BAR ::= titulo DOSPUNTOS DOSPUNTOS CHAR IGUAL CADENA 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficasBarras.put(titulo,cad);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TITULO_BAR",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EJEX_BAR ::= ejex DOSPUNTOS DOSPUNTOS CHAR IGUAL COR_IZQ EXP_SUCESIVASGRAF COR_DER 
            {
              Object RESULT =null;
		int eje_xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int eje_xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String eje_x = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object exp_s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		graficasBarras.put(eje_x,exp_s.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EJEX_BAR",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EJEX_BAR ::= ejex DOSPUNTOS DOSPUNTOS CHAR IGUAL EXP_SUCESIVASGRAF 
            {
              Object RESULT =null;
		int eje_xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int eje_xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String eje_x = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp_s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficasBarras.put(eje_x,exp_s.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EJEX_BAR",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EJEY_BAR ::= ejey DOSPUNTOS DOSPUNTOS DOUBLE IGUAL COR_IZQ EXP_SUCESIVASGRAF COR_DER 
            {
              Object RESULT =null;
		int eje_yleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int eje_yright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String eje_y = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object exp_s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		graficasBarras.put(eje_y,exp_s.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EJEY_BAR",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EJEY_BAR ::= ejey DOSPUNTOS DOSPUNTOS DOUBLE IGUAL EXP_SUCESIVASGRAF 
            {
              Object RESULT =null;
		int eje_yleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int eje_yright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String eje_y = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp_s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficasBarras.put(eje_y,exp_s.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EJEY_BAR",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TITULOX_BAR ::= titulox DOSPUNTOS DOSPUNTOS CHAR IGUAL valores_grafica 
            {
              Object RESULT =null;
		int titulo_xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int titulo_xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String titulo_x = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficasBarras.put(titulo_x,cad.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TITULOX_BAR",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TITULOY_BAR ::= tituloy DOSPUNTOS DOSPUNTOS CHAR IGUAL valores_grafica 
            {
              Object RESULT =null;
		int titulo_yleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int titulo_yright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String titulo_y = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficasBarras.put(titulo_y,cad.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TITULOY_BAR",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXEC_BAR ::= exec graphbar 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String ex = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int graph_left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int graph_right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String graph_ = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficasBarras.put(ex,graph_);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXEC_BAR",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // GRAFPIE ::= graphpie PAR_IZQ SENTENCIAS_PIE PAR_DER END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GRAFPIE",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIAS_PIE ::= SENTENCIAS_PIE PIE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_PIE",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIAS_PIE ::= PIE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_PIE",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PIE ::= TITULO_PIE END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PIE",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PIE ::= LABEL_PIE END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PIE",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PIE ::= VALUES_PIE END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PIE",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PIE ::= EXEC_PIE END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PIE",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TITULO_PIE ::= titulo DOSPUNTOS DOSPUNTOS CHAR IGUAL valores_grafica 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficasPie.put(titulo,cad.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TITULO_PIE",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LABEL_PIE ::= label DOSPUNTOS DOSPUNTOS CHAR IGUAL COR_IZQ EXP_SUCESIVASGRAF COR_DER 
            {
              Object RESULT =null;
		int lableft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int labright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String lab = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object exp_s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		graficasPie.put(lab,exp_s.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LABEL_PIE",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LABEL_PIE ::= label DOSPUNTOS DOSPUNTOS CHAR IGUAL EXP_SUCESIVASGRAF 
            {
              Object RESULT =null;
		int lableft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int labright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String lab = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp_s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficasPie.put(lab,exp_s.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LABEL_PIE",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VALUES_PIE ::= values DOSPUNTOS DOSPUNTOS DOUBLE IGUAL COR_IZQ EXP_SUCESIVASGRAF COR_DER 
            {
              Object RESULT =null;
		int valuleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int valuright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String valu = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object exp_s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		graficasPie.put(valu,exp_s.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALUES_PIE",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VALUES_PIE ::= values DOSPUNTOS DOSPUNTOS DOUBLE IGUAL EXP_SUCESIVASGRAF 
            {
              Object RESULT =null;
		int valuleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int valuright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String valu = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp_s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficasPie.put(valu,exp_s.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALUES_PIE",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXEC_PIE ::= exec graphpie 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String ex = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int graph_left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int graph_right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String graph_ = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficasPie.put(ex,graph_);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXEC_PIE",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // GRAFLINEAL ::= graphline PAR_IZQ SENTENCIAS_LINE PAR_DER END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GRAFLINEAL",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIAS_LINE ::= SENTENCIAS_LINE LINE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_LINE",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIAS_LINE ::= LINE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_LINE",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LINE ::= TITULO_LINE END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINE",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LINE ::= EJEX_LINE END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINE",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LINE ::= EJEY_LINE END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINE",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LINE ::= TITULOX_LINE END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINE",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LINE ::= TITULOY_LINE END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINE",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LINE ::= EXEC_LINE END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINE",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TITULO_LINE ::= titulo DOSPUNTOS DOSPUNTOS CHAR IGUAL CADENA 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficaLineal.put(titulo,cad);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TITULO_LINE",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EJEX_LINE ::= ejex DOSPUNTOS DOSPUNTOS CHAR IGUAL COR_IZQ EXP_SUCESIVASGRAF COR_DER 
            {
              Object RESULT =null;
		int eje_xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int eje_xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String eje_x = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object exp_s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		graficaLineal.put(eje_x,exp_s.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EJEX_LINE",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EJEX_LINE ::= ejex DOSPUNTOS DOSPUNTOS CHAR IGUAL EXP_SUCESIVASGRAF 
            {
              Object RESULT =null;
		int eje_xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int eje_xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String eje_x = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp_s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficaLineal.put(eje_x,exp_s.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EJEX_LINE",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EJEY_LINE ::= ejey DOSPUNTOS DOSPUNTOS DOUBLE IGUAL COR_IZQ EXP_SUCESIVASGRAF COR_DER 
            {
              Object RESULT =null;
		int eje_yleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int eje_yright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String eje_y = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object exp_s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		graficaLineal.put(eje_y,exp_s.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EJEY_LINE",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EJEY_LINE ::= ejey DOSPUNTOS DOSPUNTOS DOUBLE IGUAL EXP_SUCESIVASGRAF 
            {
              Object RESULT =null;
		int eje_yleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int eje_yright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String eje_y = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp_s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficaLineal.put(eje_y,exp_s.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EJEY_LINE",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TITULOX_LINE ::= titulox DOSPUNTOS DOSPUNTOS CHAR IGUAL valores_grafica 
            {
              Object RESULT =null;
		int titulo_xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int titulo_xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String titulo_x = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficaLineal.put(titulo_x,cad.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TITULOX_LINE",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TITULOY_LINE ::= tituloy DOSPUNTOS DOSPUNTOS CHAR IGUAL valores_grafica 
            {
              Object RESULT =null;
		int titulo_yleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int titulo_yright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String titulo_y = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficaLineal.put(titulo_y,cad.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TITULOY_LINE",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXEC_LINE ::= exec graphline 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String ex = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int graph_left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int graph_right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String graph_ = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficaLineal.put(ex,graph_);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXEC_LINE",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // GRAFHISTO ::= histogram PAR_IZQ SENTENCIAS_HISTO PAR_DER END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GRAFHISTO",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SENTENCIAS_HISTO ::= SENTENCIAS_HISTO HISTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_HISTO",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SENTENCIAS_HISTO ::= HISTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_HISTO",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // HISTO ::= TITULO_HISTO END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("HISTO",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // HISTO ::= VALUES_HISTO END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("HISTO",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // HISTO ::= EXEC_HISTO END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("HISTO",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TITULO_HISTO ::= titulo DOSPUNTOS DOSPUNTOS CHAR IGUAL valores_grafica 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficaHisto.put(titulo,cad.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TITULO_HISTO",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VALUES_HISTO ::= values DOSPUNTOS DOSPUNTOS CHAR IGUAL COR_IZQ EXP_SUCESIVASGRAF COR_DER 
            {
              Object RESULT =null;
		int valuleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int valuright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String valu = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object exp_s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		graficaHisto.put(valu,exp_s.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALUES_HISTO",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VALUES_HISTO ::= values DOSPUNTOS DOSPUNTOS CHAR IGUAL EXP_SUCESIVASGRAF 
            {
              Object RESULT =null;
		int valuleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int valuright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String valu = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp_s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficaHisto.put(valu,exp_s.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALUES_HISTO",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXEC_HISTO ::= exec histogram 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String ex = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int graph_left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int graph_right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String graph_ = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficaHisto.put(ex,graph_);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXEC_HISTO",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TIPO ::= CHAR 
            {
              Object RESULT =null;
		int char_left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int char_right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String char_ = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = char_; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TIPO ::= DOUBLE 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = num; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXP_SUCESIVASGRAF ::= EXP_SUCESIVASGRAF COMA valores_grafica 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = val1.toString()+"="+val2.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_SUCESIVASGRAF",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXP_SUCESIVASGRAF ::= valores_grafica 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT =val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_SUCESIVASGRAF",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXP_SUCESIVAS ::= EXP_SUCESIVAS COMA valores_print 
            {
              LinkedList<Expresions> RESULT =null;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Expresions> exp_s = (LinkedList<Expresions>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresions val = (Expresions)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp_s; RESULT.add(val); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_SUCESIVAS",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXP_SUCESIVAS ::= valores_print 
            {
              LinkedList<Expresions> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresions val = (Expresions)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(val); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_SUCESIVAS",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXP_SUCESIVASARR ::= EXP_SUCESIVASARR COMA valores_variable 
            {
              Object RESULT =null;
		int exp_sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int exp_sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object exp_s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp_s.toString()+","+val.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_SUCESIVASARR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXP_SUCESIVASARR ::= valores_variable 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = val;  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_SUCESIVASARR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // valores_grafica ::= NUMERO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT =num;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_grafica",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // valores_grafica ::= CADENA 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = cad;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_grafica",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // valores_grafica ::= ID_DECLA 
            {
              Object RESULT =null;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT= id_var; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_grafica",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // valores_grafica ::= ARR_DECLA 
            {
              Object RESULT =null;
		int id_arrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id_arrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id_arr = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= id_arr;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_grafica",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // valores_print ::= NUMERO 
            {
              Expresions RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Valores(num,Valores.Datatype.DECIMAL,numright,numleft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_print",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // valores_print ::= CADENA 
            {
              Expresions RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Valores(cad,Valores.Datatype.CADENA,cadright,cadleft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_print",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // valores_print ::= OP_ARITMETICA 
            {
              Expresions RESULT =null;
		int opearileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int opeariright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object opeari = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Valores(opeari.toString(),Valores.Datatype.DECIMAL,opeariright,opearileft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_print",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // valores_print ::= OP_ESTADISTICA 
            {
              Expresions RESULT =null;
		int opeEstleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int opeEstright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object opeEst = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Valores(opeEst.toString(),Valores.Datatype.DECIMAL,opeEstright,opeEstleft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_print",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // valores_print ::= ID_DECLA 
            {
              Expresions RESULT =null;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Valores(id_var.toString(),Valores.Datatype.CADENA,id_varright,id_varleft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_print",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // valores_print ::= ARR_DECLA 
            {
              Expresions RESULT =null;
		int id_arrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id_arrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id_arr = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Valores(id_arr.toString(),Valores.Datatype.CADENA,id_arrright,id_arrleft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_print",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ID_DECLA ::= ID 
            {
              Object RESULT =null;
		int id_left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id_right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id_ = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = findvariable(id_); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ID_DECLA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ARR_DECLA ::= ID_ARRAY 
            {
              Object RESULT =null;
		int id_arrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id_arrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id_arr = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = findvariablearr(id_arr); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARR_DECLA",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // valores_variable ::= NUMERO 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String numero = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = numero; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_variable",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // valores_variable ::= CADENA 
            {
              Object RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = cadena; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_variable",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // valores_variable ::= OP_ARITMETICA 
            {
              Object RESULT =null;
		int operArileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int operAriright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object operAri = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= operAri;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_variable",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // valores_variable ::= OP_ESTADISTICA 
            {
              Object RESULT =null;
		int operEstleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int operEstright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object operEst = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= operEst;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_variable",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // valores_variable ::= ID_DECLA 
            {
              Object RESULT =null;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = id_var; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_variable",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
