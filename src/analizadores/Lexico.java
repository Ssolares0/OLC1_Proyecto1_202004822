// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/analizadores/Lexico.jflex


// ------------  Paquete e importaciones ------------
package analizadores; 

import java_cup.runtime.*;
import dataforge.Errores;
import dataforge.Token;
import java.util.ArrayList;


@SuppressWarnings("fallthrough")
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\24\u0200\1\u0300\11\u0200\1\u0400\17\u0200\1\u0500"+
    "\247\u0200\10\u0600\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\5"+
    "\1\6\1\7\4\0\1\10\1\11\1\12\2\0\1\13"+
    "\1\14\1\15\1\0\12\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\0\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\32\1\37\1\40"+
    "\1\41\1\42\1\43\1\32\1\44\1\45\1\46\1\47"+
    "\1\50\1\32\1\51\1\52\1\53\1\54\1\0\1\55"+
    "\1\0\1\32\1\0\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\32\1\37\1\40"+
    "\1\41\1\42\1\43\1\32\1\44\1\45\1\46\1\47"+
    "\1\50\1\32\1\51\1\52\1\53\12\0\1\3\252\0"+
    "\2\56\115\0\1\57\u02a8\0\2\3\u01d6\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1792];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\1\1\4\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\1\1\12\1\1\16\13"+
    "\1\14\1\15\1\1\2\3\1\0\1\16\1\0\1\17"+
    "\2\0\1\20\1\21\5\13\1\0\5\13\1\0\6\13"+
    "\1\0\4\13\1\0\1\13\1\0\1\7\1\0\1\22"+
    "\3\13\1\23\1\13\1\23\1\13\1\24\3\13\1\0"+
    "\1\13\1\25\1\13\1\26\1\27\1\30\1\26\2\13"+
    "\1\0\2\31\1\32\1\13\1\0\1\13\1\33\1\32"+
    "\1\34\3\13\1\0\1\13\1\35\1\36\1\0\1\37"+
    "\2\13\1\0\2\13\1\0\1\40\2\13\1\0\1\13"+
    "\1\0\2\13\2\0\2\13\1\0\1\13\1\0\2\13"+
    "\1\0\1\41\2\42\1\43\1\13\1\43\1\13\1\0"+
    "\2\13\1\0\1\44\1\45\1\13\1\0\1\46\1\0"+
    "\4\13\1\0\1\13\1\0\1\13\2\47\2\50\1\13"+
    "\1\0\2\51\1\0\2\13\1\0\1\13\1\0\1\13"+
    "\1\0\2\52\1\53\1\54\1\55\1\54\1\55\1\13"+
    "\2\0\1\56\1\13\1\0\2\57\1\13\1\0\2\60"+
    "\1\0\2\61\2\62\1\0\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\60\0\60"+
    "\0\60\0\u0120\0\u0150\0\60\0\60\0\u0180\0\60\0\u01b0"+
    "\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0\0\u0300\0\u0330"+
    "\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420\0\u0450\0\60\0\60"+
    "\0\u0480\0\60\0\u04b0\0\300\0\60\0\360\0\60\0\u04e0"+
    "\0\u0510\0\60\0\u0540\0\u0570\0\u05a0\0\u05d0\0\u0600\0\u0630"+
    "\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u0720\0\u0750\0\u0780\0\u07b0"+
    "\0\u07e0\0\u0810\0\u0840\0\u0870\0\u08a0\0\u08d0\0\u0900\0\u0930"+
    "\0\u0960\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u04e0\0\u0a50\0\u0210"+
    "\0\u0a80\0\u0ab0\0\u0ae0\0\u0210\0\u0b10\0\60\0\u0b40\0\u0b70"+
    "\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0210\0\u0c90\0\u0210"+
    "\0\u0cc0\0\u0210\0\60\0\u0cf0\0\u0d20\0\u0d50\0\u0210\0\60"+
    "\0\u0210\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\60\0\60\0\u0e40"+
    "\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00\0\u0210\0\u0210\0\u0f30\0\u0210"+
    "\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0\0\u1020\0\u1050\0\u0210\0\u1080"+
    "\0\u10b0\0\u10e0\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0\0\u1200"+
    "\0\u1230\0\u1260\0\u1290\0\u12c0\0\u12f0\0\u1320\0\u1350\0\u1380"+
    "\0\u0210\0\u13b0\0\u13e0\0\u0210\0\u1410\0\60\0\u1440\0\u1470"+
    "\0\u14a0\0\u14d0\0\u1500\0\60\0\u0210\0\u1530\0\u1560\0\u0210"+
    "\0\u1590\0\u15c0\0\u15f0\0\u1620\0\u1650\0\u1680\0\u16b0\0\u16e0"+
    "\0\u1710\0\u1740\0\u1770\0\u0210\0\60\0\u17a0\0\u17d0\0\u0210"+
    "\0\60\0\u1800\0\u1830\0\u1860\0\u1890\0\u18c0\0\u18f0\0\u1920"+
    "\0\u1950\0\u0210\0\60\0\u0210\0\u0210\0\u0210\0\60\0\60"+
    "\0\u1980\0\u19b0\0\u19e0\0\u0210\0\u1a10\0\u1a40\0\u0210\0\60"+
    "\0\u1a70\0\u1aa0\0\u0210\0\60\0\u1ad0\0\u0210\0\60\0\u0210"+
    "\0\60\0\u1b00\0\60";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\2\1\13\1\14\1\15\1\16"+
    "\1\17\1\2\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\22\1\26\1\27\2\22\1\30\1\31\2\22\1\32"+
    "\1\33\1\34\1\35\1\22\1\36\3\22\1\37\1\40"+
    "\1\2\1\41\61\0\2\3\1\0\2\3\52\0\2\4"+
    "\1\42\1\4\1\43\53\4\7\44\1\45\50\44\10\46"+
    "\1\45\47\46\23\0\1\47\51\0\1\50\1\13\47\0"+
    "\1\51\5\0\1\52\70\0\27\53\22\0\1\22\6\0"+
    "\17\22\1\54\7\22\22\0\1\22\6\0\27\22\22\0"+
    "\1\22\6\0\7\22\1\55\5\22\1\56\11\22\22\0"+
    "\1\22\6\0\10\22\1\57\4\22\1\60\11\22\2\0"+
    "\1\61\17\0\1\22\6\0\11\22\1\62\2\22\1\63"+
    "\7\22\1\64\2\22\22\0\1\22\6\0\17\22\1\65"+
    "\7\22\22\0\1\22\6\0\10\22\1\66\16\22\2\0"+
    "\1\67\17\0\1\22\6\0\1\70\26\22\22\0\1\22"+
    "\6\0\1\71\3\22\1\72\3\22\1\73\4\22\1\74"+
    "\4\22\1\75\4\22\2\0\1\76\17\0\1\22\6\0"+
    "\17\22\1\77\7\22\22\0\1\22\6\0\4\22\1\100"+
    "\22\22\22\0\1\22\6\0\22\22\1\101\4\22\22\0"+
    "\1\22\6\0\10\22\1\102\16\22\2\0\1\103\17\0"+
    "\1\22\6\0\1\104\26\22\53\0\1\105\12\0\1\42"+
    "\73\0\1\106\41\0\6\51\1\107\14\51\1\0\34\51"+
    "\16\0\1\53\6\0\27\53\22\0\1\22\6\0\17\22"+
    "\1\110\7\22\22\0\1\22\6\0\1\111\26\22\22\0"+
    "\1\22\6\0\12\22\1\112\1\22\1\113\12\22\22\0"+
    "\1\22\6\0\23\22\1\114\3\22\22\0\1\22\6\0"+
    "\22\22\1\115\4\22\54\0\1\116\25\0\1\22\6\0"+
    "\4\22\1\117\22\22\22\0\1\22\6\0\3\22\1\120"+
    "\23\22\22\0\1\22\6\0\4\22\1\121\22\22\22\0"+
    "\1\22\6\0\1\122\26\22\22\0\1\22\6\0\20\22"+
    "\1\123\6\22\3\0\1\124\45\0\1\124\11\0\1\124"+
    "\16\0\1\22\6\0\1\22\1\125\25\22\22\0\1\22"+
    "\6\0\24\22\1\126\2\22\22\0\1\22\6\0\3\22"+
    "\1\127\23\22\22\0\1\22\6\0\14\22\1\130\12\22"+
    "\22\0\1\22\6\0\3\22\1\131\23\22\22\0\1\22"+
    "\6\0\12\22\1\132\14\22\45\0\1\133\34\0\1\22"+
    "\6\0\10\22\1\134\4\22\1\135\11\22\2\0\1\136"+
    "\17\0\1\22\6\0\20\22\1\137\6\22\3\0\1\140"+
    "\16\0\1\22\6\0\13\22\1\141\13\22\22\0\1\22"+
    "\6\0\21\22\1\142\5\22\52\0\1\143\27\0\1\22"+
    "\6\0\12\22\1\144\4\22\1\145\7\22\44\0\1\146"+
    "\42\0\1\147\52\0\1\22\6\0\17\22\1\150\7\22"+
    "\22\0\1\22\6\0\22\22\1\151\4\22\22\0\1\22"+
    "\6\0\20\22\1\152\6\22\3\0\1\153\16\0\1\22"+
    "\6\0\1\22\1\154\25\22\22\0\1\22\6\0\24\22"+
    "\1\155\1\156\1\22\11\0\1\157\10\0\1\22\6\0"+
    "\27\22\22\0\1\22\6\0\2\22\1\160\24\22\22\0"+
    "\1\22\6\0\16\22\1\161\10\22\22\0\1\22\6\0"+
    "\21\22\1\162\5\22\52\0\1\163\27\0\1\22\6\0"+
    "\4\22\1\164\22\22\22\0\1\22\6\0\10\22\1\165"+
    "\16\22\2\0\1\166\17\0\1\22\6\0\1\167\26\22"+
    "\22\0\1\22\6\0\14\22\1\170\12\22\22\0\1\22"+
    "\6\0\6\22\1\171\20\22\45\0\1\172\34\0\1\22"+
    "\6\0\22\22\1\173\4\22\53\0\1\174\26\0\1\22"+
    "\6\0\22\22\1\175\4\22\22\0\1\22\6\0\10\22"+
    "\1\176\16\22\2\0\1\177\17\0\1\22\6\0\27\22"+
    "\1\200\21\0\1\22\6\0\13\22\1\201\13\22\22\0"+
    "\1\22\6\0\15\22\1\202\11\22\46\0\1\203\33\0"+
    "\1\22\6\0\12\22\1\204\14\22\47\0\1\205\32\0"+
    "\1\22\6\0\7\22\1\206\17\22\22\0\1\22\6\0"+
    "\15\22\1\207\11\22\46\0\1\210\33\0\1\22\6\0"+
    "\12\22\1\211\14\22\22\0\1\22\6\0\1\212\26\22"+
    "\31\0\1\213\50\0\1\22\6\0\21\22\1\214\5\22"+
    "\22\0\1\22\6\0\17\22\1\215\7\22\52\0\1\216"+
    "\27\0\1\22\6\0\12\22\1\217\14\22\43\0\1\220"+
    "\36\0\1\22\6\0\4\22\1\221\22\22\22\0\1\22"+
    "\6\0\1\222\26\22\31\0\1\223\107\0\1\224\20\0"+
    "\1\22\6\0\14\22\1\225\12\22\22\0\1\22\6\0"+
    "\12\22\1\226\14\22\43\0\1\227\36\0\1\22\6\0"+
    "\4\22\1\230\22\22\50\0\1\231\31\0\1\22\6\0"+
    "\1\22\1\232\10\22\1\233\3\22\1\234\10\22\22\0"+
    "\1\22\6\0\6\22\1\235\20\22\37\0\1\236\42\0"+
    "\1\22\6\0\14\22\1\237\12\22\45\0\1\240\34\0"+
    "\1\22\6\0\1\241\26\22\22\0\1\22\6\0\15\22"+
    "\1\242\11\22\46\0\1\243\33\0\1\22\6\0\20\22"+
    "\1\244\6\22\3\0\1\245\16\0\1\22\6\0\14\22"+
    "\1\246\12\22\45\0\1\247\34\0\1\22\6\0\4\22"+
    "\1\250\22\22\35\0\1\251\70\0\1\252\33\0\1\22"+
    "\6\0\1\253\26\22\22\0\1\22\6\0\10\22\1\254"+
    "\16\22\2\0\1\255\17\0\1\22\6\0\10\22\1\256"+
    "\16\22\2\0\1\257\17\0\1\22\6\0\17\22\1\260"+
    "\7\22\50\0\1\261\31\0\1\22\6\0\1\262\26\22"+
    "\31\0\1\263\50\0\1\22\6\0\13\22\1\264\13\22"+
    "\22\0\1\22\6\0\24\22\1\265\1\266\1\22\55\0"+
    "\1\267\1\270\23\0\1\22\6\0\26\22\1\271\57\0"+
    "\1\272\37\0\1\273\42\0\1\22\6\0\17\22\1\274"+
    "\7\22\22\0\1\22\6\0\14\22\1\275\12\22\45\0"+
    "\1\276\34\0\1\22\6\0\4\22\1\277\22\22\35\0"+
    "\1\300\44\0\1\22\6\0\1\301\26\22\31\0\1\302"+
    "\50\0\1\22\6\0\1\303\26\22\31\0\1\304\76\0"+
    "\1\305\31\0\1\22\6\0\4\22\1\306\22\22\35\0"+
    "\1\307\44\0\1\22\6\0\13\22\1\310\13\22\44\0"+
    "\1\311\44\0\1\312\72\0\1\313\17\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6960];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\3\11\2\1\2\11\1\1\1\11"+
    "\17\1\2\11\1\1\1\11\1\1\1\0\1\11\1\0"+
    "\1\11\2\0\1\11\6\1\1\0\5\1\1\0\6\1"+
    "\1\0\4\1\1\0\1\1\1\0\1\1\1\0\6\1"+
    "\1\11\5\1\1\0\6\1\1\11\2\1\1\0\1\1"+
    "\1\11\2\1\1\0\2\1\2\11\3\1\1\0\3\1"+
    "\1\0\3\1\1\0\2\1\1\0\3\1\1\0\1\1"+
    "\1\0\2\1\2\0\2\1\1\0\1\1\1\0\2\1"+
    "\1\0\5\1\1\11\1\1\1\0\2\1\1\0\1\11"+
    "\2\1\1\0\1\1\1\0\4\1\1\0\1\1\1\0"+
    "\4\1\1\11\1\1\1\0\1\1\1\11\1\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\11\3\1"+
    "\2\11\1\1\2\0\2\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\1\11\1\0\1\1\1\11\1\1\1\11"+
    "\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    public ArrayList<Errores> errLex = new ArrayList<Errores>();
    public ArrayList<Token> tokLex = new ArrayList<Token>();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error Lexico: " + yytext() + " | Fila:" + yyline + " | Columna: " + yycolumn); 
                        Errores tmp = new Errores("Lexico",yyline,yycolumn,"Componente"+yytext()+"No reconocido");
                        errLex.add(tmp);
            }
          // fall through
          case 52: break;
          case 2:
            { 
            }
          // fall through
          case 53: break;
          case 3:
            { System.out.println("Reconocio comentario una linea,lexema: "+yytext());
            }
          // fall through
          case 54: break;
          case 4:
            { System.out.println("Reconocio PARENTESIS IZQ ,lexema: "+yytext());
            Token tmp = new Token(yytext(),"delimitador");
            tokLex.add(tmp);
            return new Symbol(sym.PAR_IZQ, yycolumn, yyline, yytext());
            }
          // fall through
          case 55: break;
          case 5:
            { System.out.println("Reconocio PARENTESIS DER ,lexema: "+yytext());  
            Token tmp = new Token(yytext(),"delimitador");
            tokLex.add(tmp);
            return new Symbol(sym.PAR_DER, yycolumn, yyline, yytext());
            }
          // fall through
          case 56: break;
          case 6:
            { System.out.println("Reconocio coma ,lexema: "+yytext());
            Token tmp = new Token(yytext(),"delimitador");
            tokLex.add(tmp);
            return new Symbol(sym.COMA, yycolumn, yyline, yytext());
            }
          // fall through
          case 57: break;
          case 7:
            { System.out.println("Reconocio un numero,lexema: "+yytext());
                Token tmp = new Token(yytext(),"Numero");
                   tokLex.add(tmp);
               return new Symbol(sym.NUMERO, yycolumn, yyline, yytext());
            }
          // fall through
          case 58: break;
          case 8:
            { System.out.println("Reconocio Dos puntos ,lexema: "+yytext());
            Token tmp = new Token(yytext(),"delimitador");
            tokLex.add(tmp);
            return new Symbol(sym.DOSPUNTOS, yycolumn, yyline, yytext());
            }
          // fall through
          case 59: break;
          case 9:
            { System.out.println("Reconocio punto y coma,lexema: "+yytext());

            Token tmp = new Token(yytext(),"delimitador");
            tokLex.add(tmp);
            return new Symbol(sym.PUNTOYCOMA, yycolumn, yyline, yytext());
            }
          // fall through
          case 60: break;
          case 10:
            { System.out.println("Reconocio Signo igual ,lexema: "+yytext());
            Token tmp = new Token(yytext(),"operador");
            tokLex.add(tmp);
            return new Symbol(sym.IGUAL, yycolumn, yyline, yytext());
            }
          // fall through
          case 61: break;
          case 11:
            { System.out.println("Reconocio el id de una declaracion de variable,lexema: "+yytext());
            Token tmp = new Token(yytext(),"ID VARIABLE");
            tokLex.add(tmp);
            return new Symbol(sym.ID, yycolumn, yyline, yytext());
            }
          // fall through
          case 62: break;
          case 12:
            { System.out.println("Reconocio Corchete izquierdo ,lexema: "+yytext());
            Token tmp = new Token(yytext(),"delimitador");
            tokLex.add(tmp);
            return new Symbol(sym.COR_IZQ, yycolumn, yyline, yytext());
            }
          // fall through
          case 63: break;
          case 13:
            { System.out.println("Reconocio Corchete derecho ,lexema: "+yytext());
            Token tmp = new Token(yytext(),"delimitador");
            tokLex.add(tmp);
            return new Symbol(sym.COR_DER, yycolumn, yyline, yytext());
            }
          // fall through
          case 64: break;
          case 14:
            { System.out.println("Reconocio una cadena,lexema: "+yytext());
                Token tmp = new Token(yytext(),"Cadena");
                 tokLex.add(tmp);
                 return new Symbol(sym.CADENA, yycolumn, yyline, yytext());
            }
          // fall through
          case 65: break;
          case 15:
            { System.out.println("Reconocio Assignacion llave derecha  ,lexema: "+yytext());
            Token tmp = new Token(yytext(),"delimitador");
            tokLex.add(tmp);
            return new Symbol(sym.ASSIGN2, yycolumn, yyline, yytext());
            }
          // fall through
          case 66: break;
          case 16:
            { System.out.println("Reconocio Assignacion llave ,lexema: "+yytext());
            Token tmp = new Token(yytext(),"delimitador");
            tokLex.add(tmp);
            return new Symbol(sym.ASSIGN, yycolumn, yyline, yytext());
            }
          // fall through
          case 67: break;
          case 17:
            { System.out.println("Reconocio el id de un array ,lexema: "+yytext());
                Token tmp = new Token(yytext(),"ID ARRAY");
                tokLex.add(tmp);
              return new Symbol(sym.ID_ARRAY, yycolumn, yyline, yytext());
            }
          // fall through
          case 68: break;
          case 18:
            { System.out.println("Reconocio palabra ,lexema: "+yytext());
                    Token tmp = new Token(yytext(),"Palabra Reservada");
                    tokLex.add(tmp);
                    return new Symbol(sym.ARR, yycolumn, yyline, yytext());
            }
          // fall through
          case 69: break;
          case 19:
            { System.out.println("Reconocio palabra ,lexema: "+yytext());
                    Token tmp = new Token(yytext(),"Palabra Reservada");
                    tokLex.add(tmp);
                       return new Symbol(sym.div, yycolumn, yyline, yytext());
            }
          // fall through
          case 70: break;
          case 20:
            { System.out.println("Reconocio palabra ,lexema: "+yytext());
                    Token tmp = new Token(yytext(),"Palabra Reservada");
                    tokLex.add(tmp);
                        return new Symbol(sym.END, yycolumn, yyline, yytext());
            }
          // fall through
          case 71: break;
          case 21:
            { System.out.println("Reconocio palabra ,lexema: "+yytext());
                    Token tmp = new Token(yytext(),"Palabra Reservada");
                    tokLex.add(tmp);
                       return new Symbol(sym.max, yycolumn, yyline, yytext());
            }
          // fall through
          case 72: break;
          case 22:
            { System.out.println("Reconocio palabra ,lexema: "+yytext());
                    Token tmp = new Token(yytext(),"Palabra Reservada");
                    tokLex.add(tmp);
                           return new Symbol(sym.min, yycolumn, yyline, yytext());
            }
          // fall through
          case 73: break;
          case 23:
            { System.out.println("Reconocio palabra ,lexema: "+yytext());
                    Token tmp = new Token(yytext(),"Palabra Reservada");
                    tokLex.add(tmp);
                       return new Symbol(sym.mod, yycolumn, yyline, yytext());
            }
          // fall through
          case 74: break;
          case 24:
            { System.out.println("Reconocio palabra ,lexema: "+yytext());
                    Token tmp = new Token(yytext(),"Palabra Reservada");
                    tokLex.add(tmp);
                       return new Symbol(sym.mul, yycolumn, yyline, yytext());
            }
          // fall through
          case 75: break;
          case 25:
            { System.out.println("Reconocio palabra ,lexema: "+yytext());
                    Token tmp = new Token(yytext(),"Palabra Reservada");
                    tokLex.add(tmp);
                       return new Symbol(sym.res, yycolumn, yyline, yytext());
            }
          // fall through
          case 76: break;
          case 26:
            { System.out.println("Reconocio palabra ,lexema: "+yytext());
                    Token tmp = new Token(yytext(),"Palabra Reservada");
                    tokLex.add(tmp);
                       return new Symbol(sym.sum, yycolumn, yyline, yytext());
            }
          // fall through
          case 77: break;
          case 27:
            { System.out.println("Reconocio palabra ,lexema: "+yytext());
                    Token tmp = new Token(yytext(),"Palabra Reservada");
                    tokLex.add(tmp);
                      return new Symbol(sym.VAR, yycolumn, yyline, yytext());
            }
          // fall through
          case 78: break;
          case 28:
            { System.out.println("Reconocio comentario multi linea: "+yytext());
            }
          // fall through
          case 79: break;
          case 29:
            { System.out.println("Reconocio palabra ,lexema: "+yytext());
                    Token tmp = new Token(yytext(),"Palabra Reservada");
                    tokLex.add(tmp);
                           return new Symbol(sym.ejex, yycolumn, yyline, yytext());
            }
          // fall through
          case 80: break;
          case 30:
            { System.out.println("Reconocio palabra ,lexema: "+yytext());
                    Token tmp = new Token(yytext(),"Palabra Reservada");
                    tokLex.add(tmp);
                           return new Symbol(sym.ejey, yycolumn, yyline, yytext());
            }
          // fall through
          case 81: break;
          case 31:
            { System.out.println("Reconocio palabra ,lexema: "+yytext());
                    Token tmp = new Token(yytext(),"Palabra Reservada");
                    tokLex.add(tmp);
                           return new Symbol(sym.exec, yycolumn, yyline, yytext());
            }
          // fall through
          case 82: break;
          case 32:
            { System.out.println("Reconocio palabra ,lexema: "+yytext());
                    Token tmp = new Token(yytext(),"Palabra Reservada");
                    tokLex.add(tmp);
                       return new Symbol(sym.moda, yycolumn, yyline, yytext());
            }
          // fall through
          case 83: break;
          case 33:
            { System.out.println("Reconocio palabra ,lexema: "+yytext());
                    Token tmp = new Token(yytext(),"Palabra Reservada");
                    tokLex.add(tmp);
                           return new Symbol(sym.label, yycolumn, yyline, yytext());
            }
          // fall through
          case 84: break;
          case 34:
            { System.out.println("Reconocio palabra ,lexema: "+yytext());
                    Token tmp = new Token(yytext(),"Palabra Reservada");
                    tokLex.add(tmp);
                       return new Symbol(sym.media, yycolumn, yyline, yytext());
            }
          // fall through
          case 85: break;
          case 35:
            { System.out.println("Reconocio palabra ,lexema: "+yytext());
                    Token tmp = new Token(yytext(),"Palabra Reservada");
                    tokLex.add(tmp);
                       return new Symbol(sym.PRINT, yycolumn, yyline, yytext());
            }
          // fall through
          case 86: break;
          case 36:
            { System.out.println("Reconocio tipo de dato ,lexema: "+yytext());
                    Token tmp = new Token(yytext(),"Palabra Reservada");
                    tokLex.add(tmp);
                    return new Symbol(sym.CHAR, yycolumn, yyline, yytext());
            }
          // fall through
          case 87: break;
          case 37:
            { System.out.println("Reconocio palabra ,lexema: "+yytext());
                    Token tmp = new Token(yytext(),"Palabra Reservada");
                    tokLex.add(tmp);
                       return new Symbol(sym.COLUMN, yycolumn, yyline, yytext());
            }
          // fall through
          case 88: break;
          case 38:
            { System.out.println("Reconocio tipo de dato ,lexema: "+yytext());
                    Token tmp = new Token(yytext(),"Palabra Reservada");
                    tokLex.add(tmp);
                    return new Symbol(sym.DOUBLE, yycolumn, yyline, yytext());
            }
          // fall through
          case 89: break;
          case 39:
            { System.out.println("Reconocio palabra ,lexema: "+yytext());
                    Token tmp = new Token(yytext(),"Palabra Reservada");
                    tokLex.add(tmp);
                           return new Symbol(sym.titulo, yycolumn, yyline, yytext());
            }
          // fall through
          case 90: break;
          case 40:
            { System.out.println("Reconocio palabra ,lexema: "+yytext());
                    Token tmp = new Token(yytext(),"Palabra Reservada");
                    tokLex.add(tmp);
                           return new Symbol(sym.values, yycolumn, yyline, yytext());
            }
          // fall through
          case 91: break;
          case 41:
            { System.out.println("Reconocio palabra ,lexema: "+yytext());
                    Token tmp = new Token(yytext(),"Palabra Reservada");
                    tokLex.add(tmp);
                       return new Symbol(sym.CONSOLE, yycolumn, yyline, yytext());
            }
          // fall through
          case 92: break;
          case 42:
            { System.out.println("Reconocio palabra ,lexema: "+yytext());
                    Token tmp = new Token(yytext(),"Palabra Reservada");
                    tokLex.add(tmp);
                       return new Symbol(sym.mediana, yycolumn, yyline, yytext());
            }
          // fall through
          case 93: break;
          case 43:
            { System.out.println("Reconocio palabra ,lexema: "+yytext());
                    Token tmp = new Token(yytext(),"Palabra Reservada");
                    tokLex.add(tmp);
                       return new Symbol(sym.PROGRAM, yycolumn, yyline, yytext());
            }
          // fall through
          case 94: break;
          case 44:
            { System.out.println("Reconocio palabra ,lexema: "+yytext());
                    Token tmp = new Token(yytext(),"Palabra Reservada");
                    tokLex.add(tmp);
                           return new Symbol(sym.titulox, yycolumn, yyline, yytext());
            }
          // fall through
          case 95: break;
          case 45:
            { System.out.println("Reconocio palabra ,lexema: "+yytext());
                    Token tmp = new Token(yytext(),"Palabra Reservada");
                    tokLex.add(tmp);
                           return new Symbol(sym.tituloy, yycolumn, yyline, yytext());
            }
          // fall through
          case 96: break;
          case 46:
            { System.out.println("Reconocio palabra ,lexema: "+yytext());
                    Token tmp = new Token(yytext(),"Palabra Reservada");
                    tokLex.add(tmp);
                           return new Symbol(sym.graphbar, yycolumn, yyline, yytext());
            }
          // fall through
          case 97: break;
          case 47:
            { System.out.println("Reconocio palabra ,lexema: "+yytext());
                    Token tmp = new Token(yytext(),"Palabra Reservada");
                    tokLex.add(tmp);
                           return new Symbol(sym.graphpie, yycolumn, yyline, yytext());
            }
          // fall through
          case 98: break;
          case 48:
            { System.out.println("Reconocio palabra ,lexema: "+yytext());
                    Token tmp = new Token(yytext(),"Palabra Reservada");
                    tokLex.add(tmp);
                       return new Symbol(sym.varianza, yycolumn, yyline, yytext());
            }
          // fall through
          case 99: break;
          case 49:
            { System.out.println("Reconocio palabra ,lexema: "+yytext());
                    Token tmp = new Token(yytext(),"Palabra Reservada");
                    tokLex.add(tmp);
                           return new Symbol(sym.graphline, yycolumn, yyline, yytext());
            }
          // fall through
          case 100: break;
          case 50:
            { System.out.println("Reconocio palabra ,lexema: "+yytext());
                    Token tmp = new Token(yytext(),"Palabra Reservada");
                    tokLex.add(tmp);
                           return new Symbol(sym.histogram, yycolumn, yyline, yytext());
            }
          // fall through
          case 101: break;
          case 51:
            { System.out.println("Reconocio palabra ,lexema: "+yytext());
                    Token tmp = new Token(yytext(),"Palabra Reservada");
                    tokLex.add(tmp);
                    return new Symbol(sym.ENDPROGRAM, yycolumn, yyline, yytext());
            }
          // fall through
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
