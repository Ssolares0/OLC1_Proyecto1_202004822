// ------------  Paquete e importaciones ------------
package analizadores;

import java_cup.runtime.*;


//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error

parser code 
{:
    public double resultado;
    public String printConsole; 
    public String numeroString;
    
    public static double operaciones(String name, double a, double b) {
    String printConsole = ""; 
    double resultado = 0.0; 
    String numeroString = "";

    switch (name) {
        case "+":
            resultado = a + b;
            numeroString = Double.toString(resultado);
            System.out.println(numeroString);
            break;
        case "-":
            resultado = a - b;
            numeroString = Double.toString(resultado);
            System.out.println(numeroString);
            break;
        case "*":
            resultado = a * b;
            numeroString = Double.toString(resultado);
            System.out.println(numeroString);
            break;
        case "/":
            
            if (b != 0) {
                resultado = a / b;
                numeroString = Double.toString(resultado);
                System.out.println(numeroString);
            } else {
                System.out.println("Error: Divisi贸n por cero no permitida.");
            }
            break;
        case "%":
            resultado = a; 
            numeroString = Double.toString(resultado);
            System.out.println(numeroString);
            break;
        default:
            System.out.println("Error: Operaci贸n no reconocida.");
    }

    printConsole += "Operacion: " + name + " Resultado: " + Double.toString(resultado);

    return resultado;
    }

    
    public void clean(){

        //esta funcion permite limpiar la consola

         printConsole = ""; 
    
    }
    
 

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }

:}


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}


//------> Declaraci贸n de terminales
terminal String NUMERO,CADENA,COMA,COR_IZQ,COR_DER,ASSIGN,ASSIGN2,DOSPUNTOS,PUNTOYCOMA;
terminal String ID_VARIABLE,ID_ARRAY,CONSOLE,COLUMN,PRINT,IGUAL,PAR_IZQ,PAR_DER;
terminal String sum,res,mul,mod,div;
terminal String VAR,DOUBLE,CHAR,ARR,END,PROGRAM,ENDPROGRAM;



//------> Declaraci贸n de no terminales
non terminal INICIO;
non terminal INSTRUCCIONES;
non terminal INSTRUCCION;
non terminal DECLARACION;
non terminal VARIABLES;
non terminal TIPO;
non terminal EXP;
non terminal EXP_TITULO;
non terminal EXP_ARITMETICAS;
non terminal EXPRESION;
non terminal valores;
non terminal EXPRESION_PRINT;
non terminal Operacion_numerica;
non terminal IMPRIMIR_EXP;
non terminal IMPRIMIR_ARRAY;
non terminal Dec_Arreglo;
non terminal Exp_Arreglo;
non terminal EXP_SUCESIVAS;
non terminal LLAMADA_EXP;






//PROCEDENCIAS
precedence left sum,res;
precedence left mul,div;
precedence left mod;


//------> Definir Simbolo Inicial
start with INICIO; 


// ------------>  Producciones  <------------

//---------->Gramatica para el inicio<-------------
INICIO ::= PROGRAM INSTRUCCIONES ENDPROGRAM;

INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION
                | INSTRUCCION;

INSTRUCCION::= Dec_Arreglo END PUNTOYCOMA 
               |IMPRIMIR_EXP END PUNTOYCOMA
               |IMPRIMIR_ARRAY END PUNTOYCOMA
               |DECLARACION END PUNTOYCOMA ;


// ---------------------------->imprimir una expresion<---------------------------------------------
IMPRIMIR_EXP ::=  CONSOLE DOSPUNTOS DOSPUNTOS PRINT IGUAL EXP_SUCESIVAS ;

// ---------------------------->imprimir un ARREGLO<---------------------------------------------

IMPRIMIR_ARRAY ::= CONSOLE DOSPUNTOS DOSPUNTOS COLUMN IGUAL EXP_TITULO ASSIGN2 COR_IZQ EXP_SUCESIVAS COR_DER ; 


    EXP_TITULO ::= CADENA | ID_VARIABLE;

// ----------------------------> DECLARACION DE UN ARREGLO <----------------------------------------



Dec_Arreglo::= ARR DOSPUNTOS TIPO DOSPUNTOS DOSPUNTOS ID_ARRAY ASSIGN COR_IZQ 
                EXP_SUCESIVAS COR_DER;


                
                EXP_SUCESIVAS::= EXP_SUCESIVAS COMA valores
                                | valores;

                EXP_ARITMETICAS ::= valores COMA valores;

                 

                EXP ::= sum PAR_IZQ EXP_SUCESIVAS PAR_DER;



                valores::=   NUMERO:num {://RESULT = new Operacion(num,); :} 
                        |CADENA:cad {: :} 
                        |ID_VARIABLE 
                        |ID_ARRAY
                        |LLAMADA_EXP {: :};

                LLAMADA_EXP::= ID_VARIABLE PAR_IZQ EXP_SUCESIVAS PAR_DER
                                |ID_VARIABLE PAR_IZQ PAR_DER;
                
                
               

//--------------------------> La Declaracion de una variable<----------------

DECLARACION ::= VAR DOSPUNTOS TIPO DOSPUNTOS DOSPUNTOS ID_VARIABLE ASSIGN EXPRESION;

        TIPO ::= CHAR | DOUBLE;
        EXPRESION::= NUMERO | CADENA;
        EXPRESION_PRINT::= Dec_Arreglo;






                        

                            