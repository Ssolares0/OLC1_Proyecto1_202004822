// ------------  Paquete e importaciones ------------
package analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import expressions.Valores;
import sentence.print;
import sentence.declaracion;
import abstracto.Expresions;
import abstracto.sentencia;
import abstracto.Types;
import abstracto.Types.Type;


//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error

parser code 
{:
    public LinkedList<sentencia>AST;

    public LinkedList<sentencia>getAST(){
    
        return AST;

    }
    
   
    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }

:}


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}


//------> Declaración de terminales
terminal String NUMERO,CADENA,COMA,COR_IZQ,COR_DER,ASSIGN,ASSIGN2,DOSPUNTOS,PUNTOYCOMA;
terminal String ID_VARIABLE,ID_ARRAY,CONSOLE,COLUMN,PRINT,IGUAL,PAR_IZQ,PAR_DER;
terminal String sum,res,mul,mod,div;
terminal String VAR,DOUBLE,CHAR,ARR,END,PROGRAM,ENDPROGRAM;



//------> Declaración de no terminales
non terminal INICIO;
non terminal sentencia INSTRUCCION;
non terminal LinkedList<Expresions>DECLARACION;
non terminal TIPO;
non terminal EXP;
non terminal EXP_TITULO;
non terminal EXP_ARITMETICAS;
non terminal Expresions valores;
non terminal valores_PRINT;
non terminal Operacion_numerica;
non terminal print IMPRIMIR_EXP;
non terminal IMPRIMIR_ARRAY;
non terminal Dec_Arreglo;
non terminal Exp_Arreglo;
non terminal LLAMADA_EXP;
non terminal LinkedList<sentencia>INSTRUCCIONES;
non terminal LinkedList<Expresions>EXP_SUCESIVAS;




//------> Definir Simbolo Inicial
start with INICIO; 


// ------------>  Producciones  <------------

//---------->Gramatica para el inicio<-------------
INICIO ::= PROGRAM INSTRUCCIONES:b ENDPROGRAM {: parser.AST=b; :};

INSTRUCCIONES ::= INSTRUCCIONES:a INSTRUCCION:b {: RESULT= a; RESULT.add(b); :}
                | INSTRUCCION: a                 {: RESULT = new LinkedList<>(); RESULT.add(a); :};

INSTRUCCION::= Dec_Arreglo END PUNTOYCOMA {::}
               |IMPRIMIR_EXP:a END PUNTOYCOMA {:RESULT =a; :}
               |IMPRIMIR_ARRAY END PUNTOYCOMA
               |DECLARACION:a END PUNTOYCOMA {::};



//--------------------------> La Declaracion de una variable<----------------

DECLARACION ::= VAR DOSPUNTOS TIPO DOSPUNTOS DOSPUNTOS ID_VARIABLE ASSIGN valores: vale {:RESULT = new LinkedList<>(); RESULT.add(vale); :};



// ---------------------------->imprimir una expresion<---------------------------------------------
IMPRIMIR_EXP ::=  CONSOLE DOSPUNTOS DOSPUNTOS PRINT IGUAL EXP_SUCESIVAS: exp_s {: RESULT = new print(exp_s,exp_sright, exp_sleft); :};

// ---------------------------->imprimir un ARREGLO<---------------------------------------------

IMPRIMIR_ARRAY ::= CONSOLE DOSPUNTOS DOSPUNTOS COLUMN IGUAL EXP_TITULO ASSIGN2 COR_IZQ EXP_SUCESIVAS COR_DER ; 


    EXP_TITULO ::= CADENA | ID_VARIABLE;

// ----------------------------> DECLARACION DE UN ARREGLO <----------------------------------------



Dec_Arreglo::= ARR DOSPUNTOS TIPO DOSPUNTOS DOSPUNTOS ID_ARRAY ASSIGN COR_IZQ EXP_SUCESIVAS COR_DER;



       

TIPO ::= CHAR | DOUBLE;

EXP_SUCESIVAS::= EXP_SUCESIVAS:exp_s COMA valores: val {: RESULT = exp_s; RESULT.add(val); :}
                 | valores: val {:RESULT = new LinkedList<>(); RESULT.add(val); :};








EXP_ARITMETICAS ::= valores COMA valores;

             

EXP ::= sum PAR_IZQ valores COMA valores PAR_DER {: :}
        |res PAR_IZQ valores COMA valores PAR_DER {: :};

valores::=          NUMERO: num {:RESULT = new Valores(num,Valores.Datatype.DECIMAL,numright,numleft); :}
                    | CADENA: cad {:RESULT = new Valores(cad,Valores.Datatype.CADENA,cadright,cadleft); :}
                    | ID_VARIABLE: var {: RESULT = new Valores(var,Valores.Datatype.VARIABLE,varright,varleft); :};


LLAMADA_EXP::= ID_VARIABLE PAR_IZQ EXP_SUCESIVAS PAR_DER
                                |ID_VARIABLE PAR_IZQ PAR_DER;
//valores_PRINT::= Dec_Arreglo;

                            