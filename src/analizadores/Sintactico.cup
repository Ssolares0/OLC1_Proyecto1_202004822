// ------------  Paquete e importaciones ------------
package analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import expressions.Valores;
import sentence.print;
import sentence.erro;
import sentence.declaracionArray;
import sentence.declaracion;
import abstracto.Expresions;
import abstracto.sentencia;
import abstracto.Types;
import abstracto.Types.Type;
import java.util.ArrayList;
import dataforge.Errores;
import analizadores.funcionesUsar;
import java.util.HashMap;



//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error



parser code 
{:  
    public ArrayList<Errores> errSint = new ArrayList<Errores>();

    public HashMap<String,String> graficasBarras = new HashMap<String,String>();

    public LinkedList<sentencia>AST;
    

    public LinkedList<sentencia>getAST(){
    
        return AST;

    }



    public static String buscarVariable(String id){
        declaracion miDeclaracion = new declaracion("miID", "miValor", 1, 1);

        // Llamada a la función obtenerValorPorID
        String valorEncontrado = miDeclaracion.obtenerValorPorID(id);

        if (valorEncontrado != null) {
            System.out.println("Valor encontrado: " + valorEncontrado);
            return valorEncontrado;
        } else {
            System.out.println("ID no encontrado.");
        }
        return valorEncontrado;
    
 
    
    } 

    
    
   
    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
            Errores tmp = new Errores("Sintactico",s.right,s.left, s.value+"Error de sintaxis");
            errSint.add(tmp);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
            Errores tmp = new Errores("Sintactico",s.right,s.left, s.value+"Error de sintaxis sin recuperacion");
            errSint.add(tmp);
    }

:}


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}


//------> Declaración de terminales
terminal String NUMERO,CADENA,COMA,COR_IZQ,COR_DER,ASSIGN,ASSIGN2,DOSPUNTOS,PUNTOYCOMA;
terminal String ID,ID_ARRAY,CONSOLE,COLUMN,PRINT,IGUAL,PAR_IZQ,PAR_DER,ARROBA;
terminal String sum,res,mul,mod,div,media,mediana,moda,varianza,max,min;
terminal String VAR,DOUBLE,CHAR,ARR,END,PROGRAM,ENDPROGRAM;
terminal String graphbar,graphpie,graphline,histogram;
terminal String titulo,ejex,ejey,titulox,tituloy,values,label,exec;             

    
    



//------> Declaración de no terminales
non terminal INICIO;
non terminal sentencia INSTRUCCION;
non terminal declaracion DECLARACION;
non terminal TIPO;
non terminal OP,OP2,OP3,OP4;
non terminal EXP_TITULO;
non terminal Expresions valores_print;
non terminal print IMPRIMIR_EXP;
non terminal valores_variable;
non terminal print IMPRIMIR_ARRAY;
non terminal declaracionArray Dec_Arreglo;
non terminal OP_ARITMETICA;
non terminal OP_ESTADISTICA;
non terminal Exp_Arreglo;
non terminal LinkedList<sentencia>INSTRUCCIONES;
non terminal LinkedList<Expresions>EXP_SUCESIVAS;

non terminal GRAFBARRAS,SENTENCIAS_BAR,BAR,TITULO_BAR,TITULOX_BAR,TITULOY_BAR,EJEX_BAR,EJEY_BAR,EXEC_BAR;


// Asociatividades y Prioridades 
precedence left sum, res;
precedence left mul, div, mod;




//------> Definir Simbolo Inicial
start with INICIO; 


// ------------>  Producciones  <------------

//---------->Gramatica para el inicio<-------------
INICIO ::= PROGRAM INSTRUCCIONES:b ENDPROGRAM {: parser.AST=b; :};

INSTRUCCIONES ::= INSTRUCCIONES:a INSTRUCCION:b {: RESULT= a; RESULT.add(b); :}
                | INSTRUCCION: a                 {: RESULT = new LinkedList<>(); RESULT.add(a); :};
                
INSTRUCCION::=  IMPRIMIR_EXP:a END PUNTOYCOMA {:RESULT =a; :}
               |IMPRIMIR_ARRAY:a END PUNTOYCOMA {: RESULT=a; :}
               |DECLARACION:a END PUNTOYCOMA {: RESULT=a; :}
               |Dec_Arreglo:a END PUNTOYCOMA {:RESULT=a; :}
               |GRAFBARRAS END PUNTOYCOMA {::}
               |error:e END PUNTOYCOMA {:RESULT= new erro("error sint"); :};


//--------------------------> La Declaracion de una variable<----------------

DECLARACION ::= VAR DOSPUNTOS TIPO DOSPUNTOS DOSPUNTOS ID: id_var ASSIGN valores_variable: exp_va {:RESULT = new declaracion(id_var,exp_va.toString(),exp_varight,exp_valeft); :};
   

// ----------------------------> DECLARACION DE UN ARREGLO <----------------------------------------



Dec_Arreglo::= ARR DOSPUNTOS TIPO:tipo_arr DOSPUNTOS DOSPUNTOS ARROBA ID: id_arr ASSIGN COR_IZQ EXP_SUCESIVAS:exp_s COR_DER {:RESULT = new declaracionArray(exp_s,exp_sright, exp_sleft,tipo_arr.toString(),id_arr.toString()); :};



// ---------------------------->imprimir una expresion<---------------------------------------------
IMPRIMIR_EXP ::=  CONSOLE DOSPUNTOS DOSPUNTOS PRINT IGUAL EXP_SUCESIVAS: exp_s {: RESULT = new print(exp_s,exp_sright, exp_sleft); :};

// ---------------------------->imprimir un ARREGLO<---------------------------------------------

IMPRIMIR_ARRAY ::= CONSOLE DOSPUNTOS DOSPUNTOS COLUMN IGUAL EXP_TITULO ASSIGN2 COR_IZQ EXP_SUCESIVAS: exp_s {: RESULT = new print(exp_s,exp_sright, exp_sleft); :} COR_DER ; 

    EXP_TITULO ::= CADENA | ID;



//--------------------------->Operaciones ARITMETICAS Y ESTADISTICAS<-----------------------------------------------------------

OP_ARITMETICA ::= 
                 sum: sum PAR_IZQ OP:val PAR_DER {:double resultado = funcionesUsar.operacionAritmetica(sum, val.toString()); RESULT =resultado;:}
               | res: res PAR_IZQ OP:val PAR_DER {:double resultado = funcionesUsar.operacionAritmetica(res, val.toString()); RESULT =resultado;:}
               | mul: mul PAR_IZQ OP:val PAR_DER {:double resultado = funcionesUsar.operacionAritmetica(mul, val.toString()); RESULT =resultado;:}
               | mod: mod PAR_IZQ OP:val PAR_DER {:double resultado = funcionesUsar.operacionAritmetica(mod, val.toString()); RESULT =resultado;:}
               | div: div PAR_IZQ OP:val PAR_DER {:double resultado = funcionesUsar.operacionAritmetica(div, val.toString()); RESULT =resultado;:};

OP_ESTADISTICA::= media:media        PAR_IZQ COR_IZQ OP3:val COR_DER PAR_DER {:double resultado = funcionesUsar.operacionEstadistica(media, val.toString()); RESULT =resultado;:}
                | mediana:mediana    PAR_IZQ COR_IZQ OP3:val COR_DER PAR_DER {:double resultado = funcionesUsar.operacionEstadistica(mediana, val.toString()); RESULT =resultado;:}
                | moda:moda          PAR_IZQ COR_IZQ OP3:val COR_DER PAR_DER {:double resultado = funcionesUsar.operacionEstadistica(moda, val.toString()); RESULT =resultado;:}
                | varianza: varianza PAR_IZQ COR_IZQ OP3:val COR_DER PAR_DER {:double resultado = funcionesUsar.operacionEstadistica(varianza, val.toString()); RESULT =resultado;:}
                | max: max           PAR_IZQ COR_IZQ OP3:val COR_DER PAR_DER {:double resultado = funcionesUsar.operacionEstadistica(max, val.toString()); RESULT =resultado;:}
                | min: min           PAR_IZQ COR_IZQ OP3:val COR_DER PAR_DER {:double resultado = funcionesUsar.operacionEstadistica(min, val.toString()); RESULT =resultado;:};



OP::= 
      OP:val1 COMA OP2: val2 {:RESULT = val1.toString()+"="+val2.toString();:}
      | OP2:val {:RESULT =val;:};

OP2::= OP_ARITMETICA:resuAri {:RESULT= resuAri;:}
        | OP_ESTADISTICA: resuEst {:RESULT= resuEst; :}
        |NUMERO: num {:RESULT=num; :};
        

OP3::= 
       OP3:val1 COMA OP4: val2 {:RESULT = val1.toString()+"="+val2.toString();:}
      | OP4:val {:RESULT =val;:};

OP4::=  OP_ESTADISTICA: resuEst {:RESULT= resuEst; :}
        |OP_ARITMETICA: num {:RESULT =num; :}
        |NUMERO:  num {:RESULT=num; :};


//----------------------------------------------------------------------------------------------------------------------------------------

//--------------------------->Funciones de graficas<--------------------------------------------------------------------------------------



GRAFBARRAS::= graphbar PAR_IZQ SENTENCIAS_BAR  PAR_DER;


SENTENCIAS_BAR::= SENTENCIAS_BAR BAR
                  | BAR;

BAR::= TITULO_BAR END PUNTOYCOMA
        |EJEX_BAR END PUNTOYCOMA
        |EJEY_BAR END PUNTOYCOMA
        |TITULOX_BAR END PUNTOYCOMA
        |TITULOY_BAR END PUNTOYCOMA
        |EXEC_BAR END PUNTOYCOMA;

TITULO_BAR::= titulo:titulo DOSPUNTOS DOSPUNTOS CHAR IGUAL CADENA:cad {:graficasBarras.put(titulo,cad);:} ;
EJEX_BAR ::= ejex:eje_x DOSPUNTOS DOSPUNTOS CHAR IGUAL COR_IZQ EXP_SUCESIVAS:exp_s COR_DER {:graficasBarras.put(eje_x,"s");:} ;
EJEY_BAR ::= ejey:eje_y DOSPUNTOS DOSPUNTOS DOUBLE IGUAL COR_IZQ EXP_SUCESIVAS:exp_s COR_DER {:graficasBarras.put(eje_y,"s");:};
TITULOX_BAR ::= titulox:titulo_x DOSPUNTOS DOSPUNTOS CHAR IGUAL CADENA:cad {:graficasBarras.put(titulo_x,cad);:} ;
TITULOY_BAR ::= tituloy:titulo_y DOSPUNTOS DOSPUNTOS CHAR IGUAL CADENA:cad {:graficasBarras.put(titulo_y,cad);:};
EXEC_BAR ::= exec:ex graphbar:graph_ {:graficasBarras.put(ex,graph_);:} ;



TIPO ::= CHAR: char_ {: RESULT = char_; :}
        | DOUBLE: num {: RESULT = num; :};


EXP_SUCESIVAS::= EXP_SUCESIVAS:exp_s COMA valores_print: val {: RESULT = exp_s; RESULT.add(val); :}
                 | valores_print: val {:RESULT = new LinkedList<>(); RESULT.add(val); :};




valores_print::=      NUMERO: num {:RESULT = new Valores(num,Valores.Datatype.DECIMAL,numright,numleft); :}
                    | CADENA: cad {:RESULT = new Valores(cad,Valores.Datatype.CADENA,cadright,cadleft); :}
                    | OP_ARITMETICA:opeari {:RESULT = new Valores(opeari.toString(),Valores.Datatype.DECIMAL,opeariright,opearileft); :}
                    | OP_ESTADISTICA:opeEst {:RESULT = new Valores(opeEst.toString(),Valores.Datatype.DECIMAL,opeEstright,opeEstleft); :};
                    //| ID: id_var {: RESULT= miDeclaracion.obtenerValorPorID(id_var); :};

valores_variable ::= NUMERO: numero {: RESULT = numero; :}
                   |CADENA: cadena {: RESULT = cadena; :}
                  |OP_ARITMETICA: operAri {:RESULT= operAri;:}
                  |OP_ESTADISTICA: operEst {:RESULT= operEst;:};
                  //| ID: var {::};




                            