// ------------  Paquete e importaciones ------------
package analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import expressions.Valores;
import sentence.print;
import sentence.erro;
import sentence.func;
import sentence.declaracionArray;
import sentence.declaracion;
import abstracto.Expresions;
import abstracto.sentencia;
import abstracto.Types;
import abstracto.Types.Type;
import java.util.ArrayList;
import dataforge.Errores;
import analizadores.funcionesUsar;
import java.util.HashMap;
import java.util.Map;




//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error



parser code 
{:  
    public ArrayList<Errores> errSint = new ArrayList<Errores>();

    public HashMap<String,String> graficasBarras = new HashMap<String,String>();
    public HashMap<String,String> graficasPie = new HashMap<String,String>();
    public HashMap<String,String> graficaLineal = new HashMap<String,String>();
    public HashMap<String,String> graficaHisto = new HashMap<String,String>();
    public HashMap<String,String> variablesNorm = new HashMap<String,String>();
    public Map<String, String> variablesArr = new HashMap<>();
    public LinkedList<String> list_sucesiva = new LinkedList<>();
    

    public LinkedList<sentencia>AST;
    

    public LinkedList<sentencia>getAST(){
    
        return AST;

    }


    public String findvariable(String id) {
        String var_valor = "";

        if (variablesNorm.containsKey(id)) {
            var_valor= variablesNorm.get(id);
            
        } else {
            System.out.println("No se encontro la variable");
            var_valor="0.0";
        }

        return var_valor;
    }

    public String findvariablearr(String id) {
        String var_valor = "";

        if (variablesArr.containsKey(id)) {
            var_valor= variablesArr.get(id);
            
        } else {
            System.out.println("No se encontro la variable");
            return var_valor="0.0";
        }

        return var_valor;
    }



    

    
    
   
    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
            Errores tmp = new Errores("Sintactico",s.right,s.left, s.value+"Error de sintaxis");
            errSint.add(tmp);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
            Errores tmp = new Errores("Sintactico",s.right,s.left, s.value+"Error de sintaxis sin recuperacion");
            errSint.add(tmp);
    }

:}


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}


//------> Declaración de terminales
terminal String NUMERO,CADENA,COMA,COR_IZQ,COR_DER,ASSIGN,ASSIGN2,DOSPUNTOS,PUNTOYCOMA;
terminal String ID,ID_ARRAY,CONSOLE,COLUMN,PRINT,IGUAL,PAR_IZQ,PAR_DER;
terminal String sum,res,mul,mod,div,media,mediana,moda,varianza,max,min;
terminal String VAR,DOUBLE,CHAR,ARR,END,PROGRAM,ENDPROGRAM;
terminal String graphbar,graphpie,graphline,histogram;
terminal String titulo,ejex,ejey,titulox,tituloy,values,label,exec;             

    
    



//------> Declaración de no terminales
non terminal INICIO;
non terminal sentencia INSTRUCCION;
non terminal DECLARACION;
non terminal TIPO;
non terminal OP,OP2,OP3,OP4;
non terminal EXP_TITULO;
non terminal Expresions valores_print;
non terminal print IMPRIMIR_EXP;
non terminal valores_variable;
non terminal print IMPRIMIR_ARRAY;
non terminal Dec_Arreglo;
non terminal OP_ARITMETICA;
non terminal OP_ESTADISTICA;
non terminal Exp_Arreglo;
non terminal valores_grafica;
non terminal LinkedList<sentencia>INSTRUCCIONES;
non terminal LinkedList<Expresions>EXP_SUCESIVAS;
non terminal EXP_SUCESIVASGRAF;
non terminal EXP_SUCESIVASARR;
non terminal ID_DECLA,ARR_DECLA;

non terminal GRAFBARRAS,SENTENCIAS_BAR,BAR,TITULO_BAR,TITULOX_BAR,TITULOY_BAR,EJEX_BAR,EJEY_BAR,EXEC_BAR;
non terminal GRAFPIE,SENTENCIAS_PIE,PIE,TITULO_PIE,EXEC_PIE,LABEL_PIE,VALUES_PIE;
non terminal GRAFLINEAL,SENTENCIAS_LINE,LINE,TITULO_LINE,TITULOX_LINE,TITULOY_LINE,EJEX_LINE,EJEY_LINE,EXEC_LINE;
non terminal GRAFHISTO,SENTENCIAS_HISTO,HISTO,TITULO_HISTO,VALUES_HISTO,EXEC_HISTO;


// Asociatividades y Prioridades 
precedence left sum, res;
precedence left mul, div, mod;




//------> Definir Simbolo Inicial
start with INICIO; 


// ------------>  Producciones  <------------

//---------->Gramatica para el inicio<-------------
INICIO ::= PROGRAM INSTRUCCIONES:b ENDPROGRAM {: parser.AST=b; :};
            

INSTRUCCIONES ::= INSTRUCCIONES:a INSTRUCCION:b {: RESULT= a; RESULT.add(b); :}
                | INSTRUCCION: a                 {: RESULT = new LinkedList<>(); RESULT.add(a); :};
                
                
INSTRUCCION::=  IMPRIMIR_EXP:a END PUNTOYCOMA {:RESULT =a; :}
               |IMPRIMIR_ARRAY:a END PUNTOYCOMA {: RESULT=a; :}
               |DECLARACION:a END PUNTOYCOMA {: RESULT=new func("declarada variable"); :}
               |Dec_Arreglo:a END PUNTOYCOMA {:RESULT=new func("declarada arreglo");:}
               |GRAFBARRAS END PUNTOYCOMA {:RESULT= new func("nuevagraficabarras");:}
               |GRAFPIE END PUNTOYCOMA {:RESULT= new func("NUEVA GRAFICA PIE");:}
               |GRAFLINEAL END PUNTOYCOMA {:RESULT= new func("NUEVA GRAFICA lineal");:}
               |GRAFHISTO END PUNTOYCOMA {:RESULT= new func("NUEVA GRAFICA HISTOGRAMA");:}
               |error:e END PUNTOYCOMA {:RESULT= new erro("error sint"); :};


//--------------------------> La Declaracion de una variable<----------------

DECLARACION ::= VAR DOSPUNTOS TIPO DOSPUNTOS DOSPUNTOS ID: id_var ASSIGN valores_variable: exp_va {:RESULT = variablesNorm.put(id_var,exp_va.toString());:};//{:RESULT = new declaracion(id_var,exp_va.toString(),exp_varight,exp_valeft);  :};
   

// ----------------------------> DECLARACION DE UN ARREGLO <----------------------------------------



Dec_Arreglo::= ARR DOSPUNTOS TIPO:tipo_arr DOSPUNTOS DOSPUNTOS  ID_ARRAY: id_arr ASSIGN COR_IZQ EXP_SUCESIVASARR:exp_s COR_DER {:RESULT = variablesArr.put(id_arr,exp_s.toString()); :};



// ---------------------------->imprimir una expresion<---------------------------------------------
IMPRIMIR_EXP ::=  CONSOLE DOSPUNTOS DOSPUNTOS PRINT IGUAL EXP_SUCESIVAS: exp_s {: RESULT = new print(exp_s,exp_sright, exp_sleft,"! Salida: "); :};

// ---------------------------->imprimir un ARREGLO<---------------------------------------------

IMPRIMIR_ARRAY ::= CONSOLE DOSPUNTOS DOSPUNTOS COLUMN IGUAL EXP_TITULO:titulo ASSIGN2  COR_IZQ  EXP_SUCESIVAS: exp_s {: RESULT = new print(exp_s,exp_sright, exp_sleft,"! "+titulo.toString()+": "); :} COR_DER 
                   |CONSOLE DOSPUNTOS DOSPUNTOS COLUMN IGUAL EXP_TITULO:titulo ASSIGN2 EXP_SUCESIVAS: exp_s {: RESULT = new print(exp_s,exp_sright, exp_sleft,"! "+titulo.toString()+": "); :} ;

    EXP_TITULO ::= CADENA:cad {:RESULT= cad; :}
                    | ID_DECLA:id_titulo {:RESULT= id_titulo; :};



//--------------------------->Operaciones ARITMETICAS Y ESTADISTICAS<-----------------------------------------------------------

OP_ARITMETICA ::= 
                 sum: sum PAR_IZQ OP:val PAR_DER {:double resultado = funcionesUsar.operacionAritmetica(sum, val.toString()); RESULT =resultado;:}
               | res: res PAR_IZQ OP:val PAR_DER {:double resultado = funcionesUsar.operacionAritmetica(res, val.toString()); RESULT =resultado;:}
               | mul: mul PAR_IZQ OP:val PAR_DER {:double resultado = funcionesUsar.operacionAritmetica(mul, val.toString()); RESULT =resultado;:}
               | mod: mod PAR_IZQ OP:val PAR_DER {:double resultado = funcionesUsar.operacionAritmetica(mod, val.toString()); RESULT =resultado;:}
               | div: div PAR_IZQ OP:val PAR_DER {:double resultado = funcionesUsar.operacionAritmetica(div, val.toString()); RESULT =resultado;:};
               

OP_ESTADISTICA::= media:media        PAR_IZQ COR_IZQ OP3:val COR_DER PAR_DER {:double resultado = funcionesUsar.operacionEstadistica(media, val.toString()); RESULT =resultado;:}
                | mediana:mediana    PAR_IZQ COR_IZQ OP3:val COR_DER PAR_DER {:double resultado = funcionesUsar.operacionEstadistica(mediana, val.toString()); RESULT =resultado;:}
                | moda:moda          PAR_IZQ COR_IZQ OP3:val COR_DER PAR_DER {:double resultado = funcionesUsar.operacionEstadistica(moda, val.toString()); RESULT =resultado;:}
                | varianza: varianza PAR_IZQ COR_IZQ OP3:val COR_DER PAR_DER {:double resultado = funcionesUsar.operacionEstadistica(varianza, val.toString()); RESULT =resultado;:}
                | max: max           PAR_IZQ COR_IZQ OP3:val COR_DER PAR_DER {:double resultado = funcionesUsar.operacionEstadistica(max, val.toString()); RESULT =resultado;:}
                | min: min           PAR_IZQ COR_IZQ OP3:val COR_DER PAR_DER {:double resultado = funcionesUsar.operacionEstadistica(min, val.toString()); RESULT =resultado;:}
                | media:media        PAR_IZQ OP3:val PAR_DER {:double resultado = funcionesUsar.operacionEstadistica(media, val.toString()); RESULT =resultado;:}
                | mediana:mediana    PAR_IZQ OP3:val PAR_DER {:double resultado = funcionesUsar.operacionEstadistica(mediana, val.toString()); RESULT =resultado;:}
                | moda:moda          PAR_IZQ OP3:val PAR_DER {:double resultado = funcionesUsar.operacionEstadistica(moda, val.toString()); RESULT =resultado;:}
                | varianza: varianza PAR_IZQ OP3:val PAR_DER {:double resultado = funcionesUsar.operacionEstadistica(varianza, val.toString()); RESULT =resultado;:}
                | max: max           PAR_IZQ OP3:val PAR_DER {:double resultado = funcionesUsar.operacionEstadistica(max, val.toString()); RESULT =resultado;:}
                | min: min           PAR_IZQ OP3:val PAR_DER {:double resultado = funcionesUsar.operacionEstadistica(min, val.toString()); RESULT =resultado;:};



OP::= 
      OP:val1 COMA OP2: val2 {:RESULT = val1.toString()+"="+val2.toString();:}
      | OP2:val {:RESULT =val;:};

OP2::= OP_ARITMETICA:resuAri {:RESULT= resuAri;:}
        | OP_ESTADISTICA: resuEst {:RESULT= resuEst; :}
        |NUMERO: num {:RESULT=num; :}
        |ID_DECLA:id_var{: RESULT=id_var; :};
        

OP3::= 
       OP3:val1 COMA OP4: val2 {:RESULT = val1.toString()+","+val2.toString();:}
      | OP4:val {:RESULT =val;:};

OP4::=  OP_ESTADISTICA: resuEst {:RESULT= resuEst; :}
        |OP_ARITMETICA: num {:RESULT =num; :}
        |NUMERO:  num {:RESULT=num; :}
        |ARR_DECLA: id_arr{:RESULT=id_arr;:};


//----------------------------------------------------------------------------------------------------------------------------------------

//--------------------------->Funciones de graficas<--------------------------------------------------------------------------------------

//----------------------------------------------------------GRAFICA barras----------------------------------------------------------------

GRAFBARRAS::= graphbar PAR_IZQ SENTENCIAS_BAR  PAR_DER;


SENTENCIAS_BAR::= SENTENCIAS_BAR BAR
                  | BAR;

BAR::= TITULO_BAR END PUNTOYCOMA
        |EJEX_BAR END PUNTOYCOMA
        |EJEY_BAR END PUNTOYCOMA
        |TITULOX_BAR END PUNTOYCOMA
        |TITULOY_BAR END PUNTOYCOMA
        |EXEC_BAR END PUNTOYCOMA;
        

TITULO_BAR::= titulo:titulo DOSPUNTOS DOSPUNTOS CHAR IGUAL CADENA:cad {:graficasBarras.put(titulo,cad);:} ;

EJEX_BAR ::= ejex:eje_x DOSPUNTOS DOSPUNTOS CHAR IGUAL COR_IZQ EXP_SUCESIVASGRAF:exp_s COR_DER {:graficasBarras.put(eje_x,exp_s.toString());:} 
             |ejex:eje_x DOSPUNTOS DOSPUNTOS CHAR IGUAL EXP_SUCESIVASGRAF:exp_s {:graficasBarras.put(eje_x,exp_s.toString());:} ;

EJEY_BAR ::= ejey:eje_y DOSPUNTOS DOSPUNTOS DOUBLE IGUAL COR_IZQ EXP_SUCESIVASGRAF:exp_s COR_DER {:graficasBarras.put(eje_y,exp_s.toString());:}
             |ejey:eje_y DOSPUNTOS DOSPUNTOS DOUBLE IGUAL EXP_SUCESIVASGRAF:exp_s  {:graficasBarras.put(eje_y,exp_s.toString());:};

TITULOX_BAR ::= titulox:titulo_x DOSPUNTOS DOSPUNTOS CHAR IGUAL valores_grafica:cad {:graficasBarras.put(titulo_x,cad.toString());:} ;
TITULOY_BAR ::= tituloy:titulo_y DOSPUNTOS DOSPUNTOS CHAR IGUAL valores_grafica:cad {:graficasBarras.put(titulo_y,cad.toString());:};
EXEC_BAR ::= exec:ex graphbar:graph_ {:graficasBarras.put(ex,graph_);:};



//----------------------------------------------------------GRAFICA PIE------------------------------------------------------------------------------------


GRAFPIE::= graphpie PAR_IZQ SENTENCIAS_PIE  PAR_DER;

SENTENCIAS_PIE::= SENTENCIAS_PIE PIE
                  |PIE;
            
                  
    PIE::=  TITULO_PIE END PUNTOYCOMA
            |LABEL_PIE END PUNTOYCOMA
            |VALUES_PIE END PUNTOYCOMA
            |EXEC_PIE END PUNTOYCOMA;

TITULO_PIE ::= titulo:titulo DOSPUNTOS DOSPUNTOS CHAR IGUAL valores_grafica:cad {:graficasPie.put(titulo,cad.toString());:} ;
LABEL_PIE ::= label:lab DOSPUNTOS DOSPUNTOS CHAR IGUAL COR_IZQ EXP_SUCESIVASGRAF:exp_s COR_DER {:graficasPie.put(lab,exp_s.toString());:}
              |label:lab DOSPUNTOS DOSPUNTOS CHAR IGUAL EXP_SUCESIVASGRAF:exp_s {:graficasPie.put(lab,exp_s.toString());:};

VALUES_PIE::= values:valu DOSPUNTOS DOSPUNTOS DOUBLE IGUAL COR_IZQ EXP_SUCESIVASGRAF:exp_s COR_DER {:graficasPie.put(valu,exp_s.toString());:}
               |values:valu DOSPUNTOS DOSPUNTOS DOUBLE IGUAL EXP_SUCESIVASGRAF:exp_s {:graficasPie.put(valu,exp_s.toString());:};

EXEC_PIE ::= exec:ex graphpie:graph_ {:graficasPie.put(ex,graph_);:};


//----------------------------------------------------------GRAFICA LINEAL------------------------------------------------------------------------------------

GRAFLINEAL ::= graphline PAR_IZQ SENTENCIAS_LINE  PAR_DER;

SENTENCIAS_LINE::= SENTENCIAS_LINE LINE
                    |LINE;

        LINE ::= TITULO_LINE END PUNTOYCOMA
                |EJEX_LINE END PUNTOYCOMA
                |EJEY_LINE END PUNTOYCOMA
                |TITULOX_LINE END PUNTOYCOMA
                |TITULOY_LINE END PUNTOYCOMA
                |EXEC_LINE END PUNTOYCOMA;
               
TITULO_LINE::= titulo:titulo DOSPUNTOS DOSPUNTOS CHAR IGUAL CADENA:cad {:graficaLineal.put(titulo,cad);:} ;
EJEX_LINE ::= ejex:eje_x DOSPUNTOS DOSPUNTOS CHAR IGUAL COR_IZQ EXP_SUCESIVASGRAF:exp_s COR_DER {:graficaLineal.put(eje_x,exp_s.toString());:} 
              |ejex:eje_x DOSPUNTOS DOSPUNTOS CHAR IGUAL EXP_SUCESIVASGRAF:exp_s {:graficaLineal.put(eje_x,exp_s.toString());:} ;

EJEY_LINE ::= ejey:eje_y DOSPUNTOS DOSPUNTOS DOUBLE IGUAL COR_IZQ EXP_SUCESIVASGRAF:exp_s COR_DER {:graficaLineal.put(eje_y,exp_s.toString());:}
                |ejey:eje_y DOSPUNTOS DOSPUNTOS DOUBLE IGUAL  EXP_SUCESIVASGRAF:exp_s  {:graficaLineal.put(eje_y,exp_s.toString());:};

TITULOX_LINE ::= titulox:titulo_x DOSPUNTOS DOSPUNTOS CHAR IGUAL valores_grafica:cad {:graficaLineal.put(titulo_x,cad.toString());:} ;
TITULOY_LINE ::= tituloy:titulo_y DOSPUNTOS DOSPUNTOS CHAR IGUAL valores_grafica:cad {:graficaLineal.put(titulo_y,cad.toString());:};
EXEC_LINE ::= exec:ex graphline:graph_ {:graficaLineal.put(ex,graph_);:};


//---------------------------------------------------------GRAFICA HISTOGRAMA---------------------------------------------------------------------------------------

GRAFHISTO::= histogram PAR_IZQ SENTENCIAS_HISTO  PAR_DER;

SENTENCIAS_HISTO::= SENTENCIAS_HISTO HISTO
                  |HISTO;
            
                  
    HISTO::= TITULO_HISTO END PUNTOYCOMA
            |VALUES_HISTO END PUNTOYCOMA
            |EXEC_HISTO END PUNTOYCOMA;

TITULO_HISTO ::= titulo:titulo DOSPUNTOS DOSPUNTOS CHAR IGUAL valores_grafica:cad {:graficaHisto.put(titulo,cad.toString());:} ;

VALUES_HISTO::= values:valu DOSPUNTOS DOSPUNTOS CHAR IGUAL COR_IZQ EXP_SUCESIVASGRAF:exp_s COR_DER {:graficaHisto.put(valu,exp_s.toString());:}
               |values:valu DOSPUNTOS DOSPUNTOS CHAR IGUAL EXP_SUCESIVASGRAF:exp_s {:graficaHisto.put(valu,exp_s.toString());:};

EXEC_HISTO ::= exec:ex histogram:graph_ {:graficaHisto.put(ex,graph_);:};



TIPO ::= CHAR: char_ {: RESULT = char_; :}
        | DOUBLE: num {: RESULT = num; :};


EXP_SUCESIVASGRAF ::= EXP_SUCESIVASGRAF:val1 COMA valores_grafica: val2 {:RESULT = val1.toString()+"="+val2.toString();:}
                 | valores_grafica: val {:RESULT =val;:};


EXP_SUCESIVAS::= EXP_SUCESIVAS:exp_s COMA valores_print: val {: RESULT = exp_s; RESULT.add(val); :}
                 | valores_print: val {:RESULT = new LinkedList<>(); RESULT.add(val); :};

EXP_SUCESIVASARR::=EXP_SUCESIVASARR:exp_s COMA valores_variable: val {: RESULT = exp_s.toString()+","+val.toString(); :}
                 | valores_variable: val {:RESULT = val;  :};




valores_grafica::=      NUMERO: num {:RESULT =num;:} 
                    | CADENA: cad {:RESULT = cad;:}
                    | ID_DECLA: id_var {: RESULT= id_var; :}
                    | ARR_DECLA:id_arr {:RESULT= id_arr;:};


valores_print::=      NUMERO: num {:RESULT = new Valores(num,Valores.Datatype.DECIMAL,numright,numleft); :}
                    | CADENA: cad {:RESULT = new Valores(cad,Valores.Datatype.CADENA,cadright,cadleft); :}
                    | OP_ARITMETICA:opeari {:RESULT = new Valores(opeari.toString(),Valores.Datatype.DECIMAL,opeariright,opearileft); :}
                    | OP_ESTADISTICA:opeEst {:RESULT = new Valores(opeEst.toString(),Valores.Datatype.DECIMAL,opeEstright,opeEstleft); :}
                    | ID_DECLA: id_var {: RESULT = new Valores(id_var.toString(),Valores.Datatype.CADENA,id_varright,id_varleft); :}
                    | ARR_DECLA: id_arr {: RESULT = new Valores(id_arr.toString(),Valores.Datatype.CADENA,id_arrright,id_arrleft); :} ;



ID_DECLA::= ID:id_ {: RESULT = findvariable(id_); :};

ARR_DECLA ::= ID_ARRAY :id_arr {: RESULT = findvariablearr(id_arr); :};

valores_variable ::= NUMERO: numero {: RESULT = numero; :}
                   |CADENA: cadena {: RESULT = cadena; :}
                  |OP_ARITMETICA: operAri {:RESULT= operAri;:}
                  |OP_ESTADISTICA: operEst {:RESULT= operEst;:}
                  | ID_DECLA: id_var {: RESULT = id_var; :};






                            